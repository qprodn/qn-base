// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qn-base/app/admin/internal/data/ent/predicate"
	"qn-base/app/admin/internal/data/ent/systemuser"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSystemUser = "SystemUser"
)

// SystemUserMutation represents an operation that mutates the SystemUser nodes in the graph.
type SystemUserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_by     *string
	created_at    *time.Time
	update_by     *string
	updated_at    *time.Time
	deleted_at    *time.Time
	tenant_id     *string
	account       *string
	password      *string
	nickname      *string
	remark        *string
	dept_id       *int64
	adddept_id    *int64
	post_ids      *string
	email         *string
	mobile        *string
	sex           *int8
	addsex        *int8
	avatar        *string
	status        *int8
	addstatus     *int8
	login_ip      *string
	login_date    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SystemUser, error)
	predicates    []predicate.SystemUser
}

var _ ent.Mutation = (*SystemUserMutation)(nil)

// systemuserOption allows management of the mutation configuration using functional options.
type systemuserOption func(*SystemUserMutation)

// newSystemUserMutation creates new mutation for the SystemUser entity.
func newSystemUserMutation(c config, op Op, opts ...systemuserOption) *SystemUserMutation {
	m := &SystemUserMutation{
		config:        c,
		op:            op,
		typ:           TypeSystemUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSystemUserID sets the ID field of the mutation.
func withSystemUserID(id int) systemuserOption {
	return func(m *SystemUserMutation) {
		var (
			err   error
			once  sync.Once
			value *SystemUser
		)
		m.oldValue = func(ctx context.Context) (*SystemUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SystemUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSystemUser sets the old SystemUser of the mutation.
func withSystemUser(node *SystemUser) systemuserOption {
	return func(m *SystemUserMutation) {
		m.oldValue = func(context.Context) (*SystemUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SystemUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SystemUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SystemUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SystemUserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SystemUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateBy sets the "create_by" field.
func (m *SystemUserMutation) SetCreateBy(s string) {
	m.create_by = &s
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *SystemUserMutation) CreateBy() (r string, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldCreateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *SystemUserMutation) ClearCreateBy() {
	m.create_by = nil
	m.clearedFields[systemuser.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *SystemUserMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *SystemUserMutation) ResetCreateBy() {
	m.create_by = nil
	delete(m.clearedFields, systemuser.FieldCreateBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *SystemUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SystemUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SystemUserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[systemuser.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SystemUserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SystemUserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, systemuser.FieldCreatedAt)
}

// SetUpdateBy sets the "update_by" field.
func (m *SystemUserMutation) SetUpdateBy(s string) {
	m.update_by = &s
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *SystemUserMutation) UpdateBy() (r string, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldUpdateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *SystemUserMutation) ClearUpdateBy() {
	m.update_by = nil
	m.clearedFields[systemuser.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *SystemUserMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *SystemUserMutation) ResetUpdateBy() {
	m.update_by = nil
	delete(m.clearedFields, systemuser.FieldUpdateBy)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SystemUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SystemUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SystemUserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[systemuser.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SystemUserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SystemUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, systemuser.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SystemUserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SystemUserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SystemUserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[systemuser.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SystemUserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SystemUserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, systemuser.FieldDeletedAt)
}

// SetTenantID sets the "tenant_id" field.
func (m *SystemUserMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *SystemUserMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *SystemUserMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetAccount sets the "account" field.
func (m *SystemUserMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *SystemUserMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *SystemUserMutation) ResetAccount() {
	m.account = nil
}

// SetPassword sets the "password" field.
func (m *SystemUserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *SystemUserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldPassword(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *SystemUserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[systemuser.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *SystemUserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *SystemUserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, systemuser.FieldPassword)
}

// SetNickname sets the "nickname" field.
func (m *SystemUserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *SystemUserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldNickname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ClearNickname clears the value of the "nickname" field.
func (m *SystemUserMutation) ClearNickname() {
	m.nickname = nil
	m.clearedFields[systemuser.FieldNickname] = struct{}{}
}

// NicknameCleared returns if the "nickname" field was cleared in this mutation.
func (m *SystemUserMutation) NicknameCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldNickname]
	return ok
}

// ResetNickname resets all changes to the "nickname" field.
func (m *SystemUserMutation) ResetNickname() {
	m.nickname = nil
	delete(m.clearedFields, systemuser.FieldNickname)
}

// SetRemark sets the "remark" field.
func (m *SystemUserMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SystemUserMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SystemUserMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[systemuser.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SystemUserMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SystemUserMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, systemuser.FieldRemark)
}

// SetDeptID sets the "dept_id" field.
func (m *SystemUserMutation) SetDeptID(i int64) {
	m.dept_id = &i
	m.adddept_id = nil
}

// DeptID returns the value of the "dept_id" field in the mutation.
func (m *SystemUserMutation) DeptID() (r int64, exists bool) {
	v := m.dept_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptID returns the old "dept_id" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldDeptID(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptID: %w", err)
	}
	return oldValue.DeptID, nil
}

// AddDeptID adds i to the "dept_id" field.
func (m *SystemUserMutation) AddDeptID(i int64) {
	if m.adddept_id != nil {
		*m.adddept_id += i
	} else {
		m.adddept_id = &i
	}
}

// AddedDeptID returns the value that was added to the "dept_id" field in this mutation.
func (m *SystemUserMutation) AddedDeptID() (r int64, exists bool) {
	v := m.adddept_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeptID clears the value of the "dept_id" field.
func (m *SystemUserMutation) ClearDeptID() {
	m.dept_id = nil
	m.adddept_id = nil
	m.clearedFields[systemuser.FieldDeptID] = struct{}{}
}

// DeptIDCleared returns if the "dept_id" field was cleared in this mutation.
func (m *SystemUserMutation) DeptIDCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldDeptID]
	return ok
}

// ResetDeptID resets all changes to the "dept_id" field.
func (m *SystemUserMutation) ResetDeptID() {
	m.dept_id = nil
	m.adddept_id = nil
	delete(m.clearedFields, systemuser.FieldDeptID)
}

// SetPostIds sets the "post_ids" field.
func (m *SystemUserMutation) SetPostIds(s string) {
	m.post_ids = &s
}

// PostIds returns the value of the "post_ids" field in the mutation.
func (m *SystemUserMutation) PostIds() (r string, exists bool) {
	v := m.post_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldPostIds returns the old "post_ids" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldPostIds(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostIds: %w", err)
	}
	return oldValue.PostIds, nil
}

// ClearPostIds clears the value of the "post_ids" field.
func (m *SystemUserMutation) ClearPostIds() {
	m.post_ids = nil
	m.clearedFields[systemuser.FieldPostIds] = struct{}{}
}

// PostIdsCleared returns if the "post_ids" field was cleared in this mutation.
func (m *SystemUserMutation) PostIdsCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldPostIds]
	return ok
}

// ResetPostIds resets all changes to the "post_ids" field.
func (m *SystemUserMutation) ResetPostIds() {
	m.post_ids = nil
	delete(m.clearedFields, systemuser.FieldPostIds)
}

// SetEmail sets the "email" field.
func (m *SystemUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *SystemUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldEmail(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *SystemUserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[systemuser.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *SystemUserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *SystemUserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, systemuser.FieldEmail)
}

// SetMobile sets the "mobile" field.
func (m *SystemUserMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *SystemUserMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldMobile(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ClearMobile clears the value of the "mobile" field.
func (m *SystemUserMutation) ClearMobile() {
	m.mobile = nil
	m.clearedFields[systemuser.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *SystemUserMutation) MobileCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *SystemUserMutation) ResetMobile() {
	m.mobile = nil
	delete(m.clearedFields, systemuser.FieldMobile)
}

// SetSex sets the "sex" field.
func (m *SystemUserMutation) SetSex(i int8) {
	m.sex = &i
	m.addsex = nil
}

// Sex returns the value of the "sex" field in the mutation.
func (m *SystemUserMutation) Sex() (r int8, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldSex(ctx context.Context) (v *int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// AddSex adds i to the "sex" field.
func (m *SystemUserMutation) AddSex(i int8) {
	if m.addsex != nil {
		*m.addsex += i
	} else {
		m.addsex = &i
	}
}

// AddedSex returns the value that was added to the "sex" field in this mutation.
func (m *SystemUserMutation) AddedSex() (r int8, exists bool) {
	v := m.addsex
	if v == nil {
		return
	}
	return *v, true
}

// ClearSex clears the value of the "sex" field.
func (m *SystemUserMutation) ClearSex() {
	m.sex = nil
	m.addsex = nil
	m.clearedFields[systemuser.FieldSex] = struct{}{}
}

// SexCleared returns if the "sex" field was cleared in this mutation.
func (m *SystemUserMutation) SexCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldSex]
	return ok
}

// ResetSex resets all changes to the "sex" field.
func (m *SystemUserMutation) ResetSex() {
	m.sex = nil
	m.addsex = nil
	delete(m.clearedFields, systemuser.FieldSex)
}

// SetAvatar sets the "avatar" field.
func (m *SystemUserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *SystemUserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldAvatar(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *SystemUserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[systemuser.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *SystemUserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *SystemUserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, systemuser.FieldAvatar)
}

// SetStatus sets the "status" field.
func (m *SystemUserMutation) SetStatus(i int8) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *SystemUserMutation) Status() (r int8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *SystemUserMutation) AddStatus(i int8) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *SystemUserMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *SystemUserMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[systemuser.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SystemUserMutation) StatusCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SystemUserMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, systemuser.FieldStatus)
}

// SetLoginIP sets the "login_ip" field.
func (m *SystemUserMutation) SetLoginIP(s string) {
	m.login_ip = &s
}

// LoginIP returns the value of the "login_ip" field in the mutation.
func (m *SystemUserMutation) LoginIP() (r string, exists bool) {
	v := m.login_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginIP returns the old "login_ip" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldLoginIP(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginIP: %w", err)
	}
	return oldValue.LoginIP, nil
}

// ClearLoginIP clears the value of the "login_ip" field.
func (m *SystemUserMutation) ClearLoginIP() {
	m.login_ip = nil
	m.clearedFields[systemuser.FieldLoginIP] = struct{}{}
}

// LoginIPCleared returns if the "login_ip" field was cleared in this mutation.
func (m *SystemUserMutation) LoginIPCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldLoginIP]
	return ok
}

// ResetLoginIP resets all changes to the "login_ip" field.
func (m *SystemUserMutation) ResetLoginIP() {
	m.login_ip = nil
	delete(m.clearedFields, systemuser.FieldLoginIP)
}

// SetLoginDate sets the "login_date" field.
func (m *SystemUserMutation) SetLoginDate(t time.Time) {
	m.login_date = &t
}

// LoginDate returns the value of the "login_date" field in the mutation.
func (m *SystemUserMutation) LoginDate() (r time.Time, exists bool) {
	v := m.login_date
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginDate returns the old "login_date" field's value of the SystemUser entity.
// If the SystemUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemUserMutation) OldLoginDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginDate: %w", err)
	}
	return oldValue.LoginDate, nil
}

// ClearLoginDate clears the value of the "login_date" field.
func (m *SystemUserMutation) ClearLoginDate() {
	m.login_date = nil
	m.clearedFields[systemuser.FieldLoginDate] = struct{}{}
}

// LoginDateCleared returns if the "login_date" field was cleared in this mutation.
func (m *SystemUserMutation) LoginDateCleared() bool {
	_, ok := m.clearedFields[systemuser.FieldLoginDate]
	return ok
}

// ResetLoginDate resets all changes to the "login_date" field.
func (m *SystemUserMutation) ResetLoginDate() {
	m.login_date = nil
	delete(m.clearedFields, systemuser.FieldLoginDate)
}

// Where appends a list predicates to the SystemUserMutation builder.
func (m *SystemUserMutation) Where(ps ...predicate.SystemUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SystemUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SystemUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SystemUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SystemUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SystemUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SystemUser).
func (m *SystemUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SystemUserMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.create_by != nil {
		fields = append(fields, systemuser.FieldCreateBy)
	}
	if m.created_at != nil {
		fields = append(fields, systemuser.FieldCreatedAt)
	}
	if m.update_by != nil {
		fields = append(fields, systemuser.FieldUpdateBy)
	}
	if m.updated_at != nil {
		fields = append(fields, systemuser.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, systemuser.FieldDeletedAt)
	}
	if m.tenant_id != nil {
		fields = append(fields, systemuser.FieldTenantID)
	}
	if m.account != nil {
		fields = append(fields, systemuser.FieldAccount)
	}
	if m.password != nil {
		fields = append(fields, systemuser.FieldPassword)
	}
	if m.nickname != nil {
		fields = append(fields, systemuser.FieldNickname)
	}
	if m.remark != nil {
		fields = append(fields, systemuser.FieldRemark)
	}
	if m.dept_id != nil {
		fields = append(fields, systemuser.FieldDeptID)
	}
	if m.post_ids != nil {
		fields = append(fields, systemuser.FieldPostIds)
	}
	if m.email != nil {
		fields = append(fields, systemuser.FieldEmail)
	}
	if m.mobile != nil {
		fields = append(fields, systemuser.FieldMobile)
	}
	if m.sex != nil {
		fields = append(fields, systemuser.FieldSex)
	}
	if m.avatar != nil {
		fields = append(fields, systemuser.FieldAvatar)
	}
	if m.status != nil {
		fields = append(fields, systemuser.FieldStatus)
	}
	if m.login_ip != nil {
		fields = append(fields, systemuser.FieldLoginIP)
	}
	if m.login_date != nil {
		fields = append(fields, systemuser.FieldLoginDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SystemUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case systemuser.FieldCreateBy:
		return m.CreateBy()
	case systemuser.FieldCreatedAt:
		return m.CreatedAt()
	case systemuser.FieldUpdateBy:
		return m.UpdateBy()
	case systemuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case systemuser.FieldDeletedAt:
		return m.DeletedAt()
	case systemuser.FieldTenantID:
		return m.TenantID()
	case systemuser.FieldAccount:
		return m.Account()
	case systemuser.FieldPassword:
		return m.Password()
	case systemuser.FieldNickname:
		return m.Nickname()
	case systemuser.FieldRemark:
		return m.Remark()
	case systemuser.FieldDeptID:
		return m.DeptID()
	case systemuser.FieldPostIds:
		return m.PostIds()
	case systemuser.FieldEmail:
		return m.Email()
	case systemuser.FieldMobile:
		return m.Mobile()
	case systemuser.FieldSex:
		return m.Sex()
	case systemuser.FieldAvatar:
		return m.Avatar()
	case systemuser.FieldStatus:
		return m.Status()
	case systemuser.FieldLoginIP:
		return m.LoginIP()
	case systemuser.FieldLoginDate:
		return m.LoginDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SystemUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case systemuser.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case systemuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case systemuser.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case systemuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case systemuser.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case systemuser.FieldTenantID:
		return m.OldTenantID(ctx)
	case systemuser.FieldAccount:
		return m.OldAccount(ctx)
	case systemuser.FieldPassword:
		return m.OldPassword(ctx)
	case systemuser.FieldNickname:
		return m.OldNickname(ctx)
	case systemuser.FieldRemark:
		return m.OldRemark(ctx)
	case systemuser.FieldDeptID:
		return m.OldDeptID(ctx)
	case systemuser.FieldPostIds:
		return m.OldPostIds(ctx)
	case systemuser.FieldEmail:
		return m.OldEmail(ctx)
	case systemuser.FieldMobile:
		return m.OldMobile(ctx)
	case systemuser.FieldSex:
		return m.OldSex(ctx)
	case systemuser.FieldAvatar:
		return m.OldAvatar(ctx)
	case systemuser.FieldStatus:
		return m.OldStatus(ctx)
	case systemuser.FieldLoginIP:
		return m.OldLoginIP(ctx)
	case systemuser.FieldLoginDate:
		return m.OldLoginDate(ctx)
	}
	return nil, fmt.Errorf("unknown SystemUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SystemUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case systemuser.FieldCreateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case systemuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case systemuser.FieldUpdateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case systemuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case systemuser.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case systemuser.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case systemuser.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case systemuser.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case systemuser.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case systemuser.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case systemuser.FieldDeptID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptID(v)
		return nil
	case systemuser.FieldPostIds:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostIds(v)
		return nil
	case systemuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case systemuser.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case systemuser.FieldSex:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	case systemuser.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case systemuser.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case systemuser.FieldLoginIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginIP(v)
		return nil
	case systemuser.FieldLoginDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginDate(v)
		return nil
	}
	return fmt.Errorf("unknown SystemUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SystemUserMutation) AddedFields() []string {
	var fields []string
	if m.adddept_id != nil {
		fields = append(fields, systemuser.FieldDeptID)
	}
	if m.addsex != nil {
		fields = append(fields, systemuser.FieldSex)
	}
	if m.addstatus != nil {
		fields = append(fields, systemuser.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SystemUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case systemuser.FieldDeptID:
		return m.AddedDeptID()
	case systemuser.FieldSex:
		return m.AddedSex()
	case systemuser.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SystemUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case systemuser.FieldDeptID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeptID(v)
		return nil
	case systemuser.FieldSex:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSex(v)
		return nil
	case systemuser.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown SystemUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SystemUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(systemuser.FieldCreateBy) {
		fields = append(fields, systemuser.FieldCreateBy)
	}
	if m.FieldCleared(systemuser.FieldCreatedAt) {
		fields = append(fields, systemuser.FieldCreatedAt)
	}
	if m.FieldCleared(systemuser.FieldUpdateBy) {
		fields = append(fields, systemuser.FieldUpdateBy)
	}
	if m.FieldCleared(systemuser.FieldUpdatedAt) {
		fields = append(fields, systemuser.FieldUpdatedAt)
	}
	if m.FieldCleared(systemuser.FieldDeletedAt) {
		fields = append(fields, systemuser.FieldDeletedAt)
	}
	if m.FieldCleared(systemuser.FieldPassword) {
		fields = append(fields, systemuser.FieldPassword)
	}
	if m.FieldCleared(systemuser.FieldNickname) {
		fields = append(fields, systemuser.FieldNickname)
	}
	if m.FieldCleared(systemuser.FieldRemark) {
		fields = append(fields, systemuser.FieldRemark)
	}
	if m.FieldCleared(systemuser.FieldDeptID) {
		fields = append(fields, systemuser.FieldDeptID)
	}
	if m.FieldCleared(systemuser.FieldPostIds) {
		fields = append(fields, systemuser.FieldPostIds)
	}
	if m.FieldCleared(systemuser.FieldEmail) {
		fields = append(fields, systemuser.FieldEmail)
	}
	if m.FieldCleared(systemuser.FieldMobile) {
		fields = append(fields, systemuser.FieldMobile)
	}
	if m.FieldCleared(systemuser.FieldSex) {
		fields = append(fields, systemuser.FieldSex)
	}
	if m.FieldCleared(systemuser.FieldAvatar) {
		fields = append(fields, systemuser.FieldAvatar)
	}
	if m.FieldCleared(systemuser.FieldStatus) {
		fields = append(fields, systemuser.FieldStatus)
	}
	if m.FieldCleared(systemuser.FieldLoginIP) {
		fields = append(fields, systemuser.FieldLoginIP)
	}
	if m.FieldCleared(systemuser.FieldLoginDate) {
		fields = append(fields, systemuser.FieldLoginDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SystemUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SystemUserMutation) ClearField(name string) error {
	switch name {
	case systemuser.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case systemuser.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case systemuser.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	case systemuser.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case systemuser.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case systemuser.FieldPassword:
		m.ClearPassword()
		return nil
	case systemuser.FieldNickname:
		m.ClearNickname()
		return nil
	case systemuser.FieldRemark:
		m.ClearRemark()
		return nil
	case systemuser.FieldDeptID:
		m.ClearDeptID()
		return nil
	case systemuser.FieldPostIds:
		m.ClearPostIds()
		return nil
	case systemuser.FieldEmail:
		m.ClearEmail()
		return nil
	case systemuser.FieldMobile:
		m.ClearMobile()
		return nil
	case systemuser.FieldSex:
		m.ClearSex()
		return nil
	case systemuser.FieldAvatar:
		m.ClearAvatar()
		return nil
	case systemuser.FieldStatus:
		m.ClearStatus()
		return nil
	case systemuser.FieldLoginIP:
		m.ClearLoginIP()
		return nil
	case systemuser.FieldLoginDate:
		m.ClearLoginDate()
		return nil
	}
	return fmt.Errorf("unknown SystemUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SystemUserMutation) ResetField(name string) error {
	switch name {
	case systemuser.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case systemuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case systemuser.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case systemuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case systemuser.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case systemuser.FieldTenantID:
		m.ResetTenantID()
		return nil
	case systemuser.FieldAccount:
		m.ResetAccount()
		return nil
	case systemuser.FieldPassword:
		m.ResetPassword()
		return nil
	case systemuser.FieldNickname:
		m.ResetNickname()
		return nil
	case systemuser.FieldRemark:
		m.ResetRemark()
		return nil
	case systemuser.FieldDeptID:
		m.ResetDeptID()
		return nil
	case systemuser.FieldPostIds:
		m.ResetPostIds()
		return nil
	case systemuser.FieldEmail:
		m.ResetEmail()
		return nil
	case systemuser.FieldMobile:
		m.ResetMobile()
		return nil
	case systemuser.FieldSex:
		m.ResetSex()
		return nil
	case systemuser.FieldAvatar:
		m.ResetAvatar()
		return nil
	case systemuser.FieldStatus:
		m.ResetStatus()
		return nil
	case systemuser.FieldLoginIP:
		m.ResetLoginIP()
		return nil
	case systemuser.FieldLoginDate:
		m.ResetLoginDate()
		return nil
	}
	return fmt.Errorf("unknown SystemUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SystemUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SystemUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SystemUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SystemUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SystemUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SystemUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SystemUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SystemUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SystemUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SystemUser edge %s", name)
}
