// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qn-base/app/admin/internal/data/ent/predicate"
	"qn-base/app/admin/internal/data/ent/systemuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemUserUpdate is the builder for updating SystemUser entities.
type SystemUserUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemUserUpdate builder.
func (_u *SystemUserUpdate) Where(ps ...predicate.SystemUser) *SystemUserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *SystemUserUpdate) SetCreateBy(v string) *SystemUserUpdate {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableCreateBy(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *SystemUserUpdate) ClearCreateBy() *SystemUserUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *SystemUserUpdate) SetUpdateBy(v string) *SystemUserUpdate {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableUpdateBy(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *SystemUserUpdate) ClearUpdateBy() *SystemUserUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SystemUserUpdate) SetUpdatedAt(v time.Time) *SystemUserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableUpdatedAt(v *time.Time) *SystemUserUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SystemUserUpdate) ClearUpdatedAt() *SystemUserUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SystemUserUpdate) SetDeletedAt(v time.Time) *SystemUserUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableDeletedAt(v *time.Time) *SystemUserUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SystemUserUpdate) ClearDeletedAt() *SystemUserUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetAccount sets the "account" field.
func (_u *SystemUserUpdate) SetAccount(v string) *SystemUserUpdate {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableAccount(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *SystemUserUpdate) SetPassword(v string) *SystemUserUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillablePassword(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// ClearPassword clears the value of the "password" field.
func (_u *SystemUserUpdate) ClearPassword() *SystemUserUpdate {
	_u.mutation.ClearPassword()
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *SystemUserUpdate) SetNickname(v string) *SystemUserUpdate {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableNickname(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *SystemUserUpdate) ClearNickname() *SystemUserUpdate {
	_u.mutation.ClearNickname()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *SystemUserUpdate) SetRemark(v string) *SystemUserUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableRemark(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *SystemUserUpdate) ClearRemark() *SystemUserUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetDeptID sets the "dept_id" field.
func (_u *SystemUserUpdate) SetDeptID(v int64) *SystemUserUpdate {
	_u.mutation.ResetDeptID()
	_u.mutation.SetDeptID(v)
	return _u
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableDeptID(v *int64) *SystemUserUpdate {
	if v != nil {
		_u.SetDeptID(*v)
	}
	return _u
}

// AddDeptID adds value to the "dept_id" field.
func (_u *SystemUserUpdate) AddDeptID(v int64) *SystemUserUpdate {
	_u.mutation.AddDeptID(v)
	return _u
}

// ClearDeptID clears the value of the "dept_id" field.
func (_u *SystemUserUpdate) ClearDeptID() *SystemUserUpdate {
	_u.mutation.ClearDeptID()
	return _u
}

// SetPostIds sets the "post_ids" field.
func (_u *SystemUserUpdate) SetPostIds(v string) *SystemUserUpdate {
	_u.mutation.SetPostIds(v)
	return _u
}

// SetNillablePostIds sets the "post_ids" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillablePostIds(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetPostIds(*v)
	}
	return _u
}

// ClearPostIds clears the value of the "post_ids" field.
func (_u *SystemUserUpdate) ClearPostIds() *SystemUserUpdate {
	_u.mutation.ClearPostIds()
	return _u
}

// SetEmail sets the "email" field.
func (_u *SystemUserUpdate) SetEmail(v string) *SystemUserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableEmail(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *SystemUserUpdate) ClearEmail() *SystemUserUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *SystemUserUpdate) SetMobile(v string) *SystemUserUpdate {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableMobile(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// ClearMobile clears the value of the "mobile" field.
func (_u *SystemUserUpdate) ClearMobile() *SystemUserUpdate {
	_u.mutation.ClearMobile()
	return _u
}

// SetSex sets the "sex" field.
func (_u *SystemUserUpdate) SetSex(v int8) *SystemUserUpdate {
	_u.mutation.ResetSex()
	_u.mutation.SetSex(v)
	return _u
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableSex(v *int8) *SystemUserUpdate {
	if v != nil {
		_u.SetSex(*v)
	}
	return _u
}

// AddSex adds value to the "sex" field.
func (_u *SystemUserUpdate) AddSex(v int8) *SystemUserUpdate {
	_u.mutation.AddSex(v)
	return _u
}

// ClearSex clears the value of the "sex" field.
func (_u *SystemUserUpdate) ClearSex() *SystemUserUpdate {
	_u.mutation.ClearSex()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *SystemUserUpdate) SetAvatar(v string) *SystemUserUpdate {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableAvatar(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *SystemUserUpdate) ClearAvatar() *SystemUserUpdate {
	_u.mutation.ClearAvatar()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SystemUserUpdate) SetStatus(v int8) *SystemUserUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableStatus(v *int8) *SystemUserUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *SystemUserUpdate) AddStatus(v int8) *SystemUserUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *SystemUserUpdate) ClearStatus() *SystemUserUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetLoginIP sets the "login_ip" field.
func (_u *SystemUserUpdate) SetLoginIP(v string) *SystemUserUpdate {
	_u.mutation.SetLoginIP(v)
	return _u
}

// SetNillableLoginIP sets the "login_ip" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableLoginIP(v *string) *SystemUserUpdate {
	if v != nil {
		_u.SetLoginIP(*v)
	}
	return _u
}

// ClearLoginIP clears the value of the "login_ip" field.
func (_u *SystemUserUpdate) ClearLoginIP() *SystemUserUpdate {
	_u.mutation.ClearLoginIP()
	return _u
}

// SetLoginDate sets the "login_date" field.
func (_u *SystemUserUpdate) SetLoginDate(v time.Time) *SystemUserUpdate {
	_u.mutation.SetLoginDate(v)
	return _u
}

// SetNillableLoginDate sets the "login_date" field if the given value is not nil.
func (_u *SystemUserUpdate) SetNillableLoginDate(v *time.Time) *SystemUserUpdate {
	if v != nil {
		_u.SetLoginDate(*v)
	}
	return _u
}

// ClearLoginDate clears the value of the "login_date" field.
func (_u *SystemUserUpdate) ClearLoginDate() *SystemUserUpdate {
	_u.mutation.ClearLoginDate()
	return _u
}

// Mutation returns the SystemUserMutation object of the builder.
func (_u *SystemUserUpdate) Mutation() *SystemUserMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SystemUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SystemUserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SystemUserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SystemUserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SystemUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemUserUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SystemUserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemuser.Table, systemuser.Columns, sqlgraph.NewFieldSpec(systemuser.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(systemuser.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(systemuser.FieldCreateBy, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(systemuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(systemuser.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(systemuser.FieldUpdateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(systemuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(systemuser.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(systemuser.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(systemuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(systemuser.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(systemuser.FieldPassword, field.TypeString, value)
	}
	if _u.mutation.PasswordCleared() {
		_spec.ClearField(systemuser.FieldPassword, field.TypeString)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(systemuser.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(systemuser.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(systemuser.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(systemuser.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.DeptID(); ok {
		_spec.SetField(systemuser.FieldDeptID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeptID(); ok {
		_spec.AddField(systemuser.FieldDeptID, field.TypeInt64, value)
	}
	if _u.mutation.DeptIDCleared() {
		_spec.ClearField(systemuser.FieldDeptID, field.TypeInt64)
	}
	if value, ok := _u.mutation.PostIds(); ok {
		_spec.SetField(systemuser.FieldPostIds, field.TypeString, value)
	}
	if _u.mutation.PostIdsCleared() {
		_spec.ClearField(systemuser.FieldPostIds, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(systemuser.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(systemuser.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(systemuser.FieldMobile, field.TypeString, value)
	}
	if _u.mutation.MobileCleared() {
		_spec.ClearField(systemuser.FieldMobile, field.TypeString)
	}
	if value, ok := _u.mutation.Sex(); ok {
		_spec.SetField(systemuser.FieldSex, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedSex(); ok {
		_spec.AddField(systemuser.FieldSex, field.TypeInt8, value)
	}
	if _u.mutation.SexCleared() {
		_spec.ClearField(systemuser.FieldSex, field.TypeInt8)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(systemuser.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(systemuser.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(systemuser.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(systemuser.FieldStatus, field.TypeInt8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(systemuser.FieldStatus, field.TypeInt8)
	}
	if value, ok := _u.mutation.LoginIP(); ok {
		_spec.SetField(systemuser.FieldLoginIP, field.TypeString, value)
	}
	if _u.mutation.LoginIPCleared() {
		_spec.ClearField(systemuser.FieldLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.LoginDate(); ok {
		_spec.SetField(systemuser.FieldLoginDate, field.TypeTime, value)
	}
	if _u.mutation.LoginDateCleared() {
		_spec.ClearField(systemuser.FieldLoginDate, field.TypeTime)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SystemUserUpdateOne is the builder for updating a single SystemUser entity.
type SystemUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreateBy sets the "create_by" field.
func (_u *SystemUserUpdateOne) SetCreateBy(v string) *SystemUserUpdateOne {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableCreateBy(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *SystemUserUpdateOne) ClearCreateBy() *SystemUserUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *SystemUserUpdateOne) SetUpdateBy(v string) *SystemUserUpdateOne {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableUpdateBy(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *SystemUserUpdateOne) ClearUpdateBy() *SystemUserUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SystemUserUpdateOne) SetUpdatedAt(v time.Time) *SystemUserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableUpdatedAt(v *time.Time) *SystemUserUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SystemUserUpdateOne) ClearUpdatedAt() *SystemUserUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SystemUserUpdateOne) SetDeletedAt(v time.Time) *SystemUserUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableDeletedAt(v *time.Time) *SystemUserUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SystemUserUpdateOne) ClearDeletedAt() *SystemUserUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetAccount sets the "account" field.
func (_u *SystemUserUpdateOne) SetAccount(v string) *SystemUserUpdateOne {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableAccount(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *SystemUserUpdateOne) SetPassword(v string) *SystemUserUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillablePassword(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// ClearPassword clears the value of the "password" field.
func (_u *SystemUserUpdateOne) ClearPassword() *SystemUserUpdateOne {
	_u.mutation.ClearPassword()
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *SystemUserUpdateOne) SetNickname(v string) *SystemUserUpdateOne {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableNickname(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *SystemUserUpdateOne) ClearNickname() *SystemUserUpdateOne {
	_u.mutation.ClearNickname()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *SystemUserUpdateOne) SetRemark(v string) *SystemUserUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableRemark(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *SystemUserUpdateOne) ClearRemark() *SystemUserUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetDeptID sets the "dept_id" field.
func (_u *SystemUserUpdateOne) SetDeptID(v int64) *SystemUserUpdateOne {
	_u.mutation.ResetDeptID()
	_u.mutation.SetDeptID(v)
	return _u
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableDeptID(v *int64) *SystemUserUpdateOne {
	if v != nil {
		_u.SetDeptID(*v)
	}
	return _u
}

// AddDeptID adds value to the "dept_id" field.
func (_u *SystemUserUpdateOne) AddDeptID(v int64) *SystemUserUpdateOne {
	_u.mutation.AddDeptID(v)
	return _u
}

// ClearDeptID clears the value of the "dept_id" field.
func (_u *SystemUserUpdateOne) ClearDeptID() *SystemUserUpdateOne {
	_u.mutation.ClearDeptID()
	return _u
}

// SetPostIds sets the "post_ids" field.
func (_u *SystemUserUpdateOne) SetPostIds(v string) *SystemUserUpdateOne {
	_u.mutation.SetPostIds(v)
	return _u
}

// SetNillablePostIds sets the "post_ids" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillablePostIds(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetPostIds(*v)
	}
	return _u
}

// ClearPostIds clears the value of the "post_ids" field.
func (_u *SystemUserUpdateOne) ClearPostIds() *SystemUserUpdateOne {
	_u.mutation.ClearPostIds()
	return _u
}

// SetEmail sets the "email" field.
func (_u *SystemUserUpdateOne) SetEmail(v string) *SystemUserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableEmail(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *SystemUserUpdateOne) ClearEmail() *SystemUserUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *SystemUserUpdateOne) SetMobile(v string) *SystemUserUpdateOne {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableMobile(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// ClearMobile clears the value of the "mobile" field.
func (_u *SystemUserUpdateOne) ClearMobile() *SystemUserUpdateOne {
	_u.mutation.ClearMobile()
	return _u
}

// SetSex sets the "sex" field.
func (_u *SystemUserUpdateOne) SetSex(v int8) *SystemUserUpdateOne {
	_u.mutation.ResetSex()
	_u.mutation.SetSex(v)
	return _u
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableSex(v *int8) *SystemUserUpdateOne {
	if v != nil {
		_u.SetSex(*v)
	}
	return _u
}

// AddSex adds value to the "sex" field.
func (_u *SystemUserUpdateOne) AddSex(v int8) *SystemUserUpdateOne {
	_u.mutation.AddSex(v)
	return _u
}

// ClearSex clears the value of the "sex" field.
func (_u *SystemUserUpdateOne) ClearSex() *SystemUserUpdateOne {
	_u.mutation.ClearSex()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *SystemUserUpdateOne) SetAvatar(v string) *SystemUserUpdateOne {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableAvatar(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *SystemUserUpdateOne) ClearAvatar() *SystemUserUpdateOne {
	_u.mutation.ClearAvatar()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SystemUserUpdateOne) SetStatus(v int8) *SystemUserUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableStatus(v *int8) *SystemUserUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *SystemUserUpdateOne) AddStatus(v int8) *SystemUserUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *SystemUserUpdateOne) ClearStatus() *SystemUserUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetLoginIP sets the "login_ip" field.
func (_u *SystemUserUpdateOne) SetLoginIP(v string) *SystemUserUpdateOne {
	_u.mutation.SetLoginIP(v)
	return _u
}

// SetNillableLoginIP sets the "login_ip" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableLoginIP(v *string) *SystemUserUpdateOne {
	if v != nil {
		_u.SetLoginIP(*v)
	}
	return _u
}

// ClearLoginIP clears the value of the "login_ip" field.
func (_u *SystemUserUpdateOne) ClearLoginIP() *SystemUserUpdateOne {
	_u.mutation.ClearLoginIP()
	return _u
}

// SetLoginDate sets the "login_date" field.
func (_u *SystemUserUpdateOne) SetLoginDate(v time.Time) *SystemUserUpdateOne {
	_u.mutation.SetLoginDate(v)
	return _u
}

// SetNillableLoginDate sets the "login_date" field if the given value is not nil.
func (_u *SystemUserUpdateOne) SetNillableLoginDate(v *time.Time) *SystemUserUpdateOne {
	if v != nil {
		_u.SetLoginDate(*v)
	}
	return _u
}

// ClearLoginDate clears the value of the "login_date" field.
func (_u *SystemUserUpdateOne) ClearLoginDate() *SystemUserUpdateOne {
	_u.mutation.ClearLoginDate()
	return _u
}

// Mutation returns the SystemUserMutation object of the builder.
func (_u *SystemUserUpdateOne) Mutation() *SystemUserMutation {
	return _u.mutation
}

// Where appends a list predicates to the SystemUserUpdate builder.
func (_u *SystemUserUpdateOne) Where(ps ...predicate.SystemUser) *SystemUserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SystemUserUpdateOne) Select(field string, fields ...string) *SystemUserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SystemUser entity.
func (_u *SystemUserUpdateOne) Save(ctx context.Context) (*SystemUser, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SystemUserUpdateOne) SaveX(ctx context.Context) *SystemUser {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SystemUserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SystemUserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SystemUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemUserUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SystemUserUpdateOne) sqlSave(ctx context.Context) (_node *SystemUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemuser.Table, systemuser.Columns, sqlgraph.NewFieldSpec(systemuser.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemuser.FieldID)
		for _, f := range fields {
			if !systemuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(systemuser.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(systemuser.FieldCreateBy, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(systemuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(systemuser.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(systemuser.FieldUpdateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(systemuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(systemuser.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(systemuser.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(systemuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(systemuser.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(systemuser.FieldPassword, field.TypeString, value)
	}
	if _u.mutation.PasswordCleared() {
		_spec.ClearField(systemuser.FieldPassword, field.TypeString)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(systemuser.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(systemuser.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(systemuser.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(systemuser.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.DeptID(); ok {
		_spec.SetField(systemuser.FieldDeptID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDeptID(); ok {
		_spec.AddField(systemuser.FieldDeptID, field.TypeInt64, value)
	}
	if _u.mutation.DeptIDCleared() {
		_spec.ClearField(systemuser.FieldDeptID, field.TypeInt64)
	}
	if value, ok := _u.mutation.PostIds(); ok {
		_spec.SetField(systemuser.FieldPostIds, field.TypeString, value)
	}
	if _u.mutation.PostIdsCleared() {
		_spec.ClearField(systemuser.FieldPostIds, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(systemuser.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(systemuser.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(systemuser.FieldMobile, field.TypeString, value)
	}
	if _u.mutation.MobileCleared() {
		_spec.ClearField(systemuser.FieldMobile, field.TypeString)
	}
	if value, ok := _u.mutation.Sex(); ok {
		_spec.SetField(systemuser.FieldSex, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedSex(); ok {
		_spec.AddField(systemuser.FieldSex, field.TypeInt8, value)
	}
	if _u.mutation.SexCleared() {
		_spec.ClearField(systemuser.FieldSex, field.TypeInt8)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(systemuser.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(systemuser.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(systemuser.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(systemuser.FieldStatus, field.TypeInt8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(systemuser.FieldStatus, field.TypeInt8)
	}
	if value, ok := _u.mutation.LoginIP(); ok {
		_spec.SetField(systemuser.FieldLoginIP, field.TypeString, value)
	}
	if _u.mutation.LoginIPCleared() {
		_spec.ClearField(systemuser.FieldLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.LoginDate(); ok {
		_spec.SetField(systemuser.FieldLoginDate, field.TypeTime, value)
	}
	if _u.mutation.LoginDateCleared() {
		_spec.ClearField(systemuser.FieldLoginDate, field.TypeTime)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &SystemUser{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
