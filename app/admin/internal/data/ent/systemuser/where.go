// Code generated by ent, DO NOT EDIT.

package systemuser

import (
	"qn-base/app/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldID, id))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldCreateBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldTenantID, v))
}

// Account applies equality check predicate on the "account" field. It's identical to AccountEQ.
func Account(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldAccount, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldPassword, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldNickname, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldRemark, v))
}

// DeptID applies equality check predicate on the "dept_id" field. It's identical to DeptIDEQ.
func DeptID(v int64) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldDeptID, v))
}

// PostIds applies equality check predicate on the "post_ids" field. It's identical to PostIdsEQ.
func PostIds(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldPostIds, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldEmail, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldMobile, v))
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldSex, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldAvatar, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldStatus, v))
}

// LoginIP applies equality check predicate on the "login_ip" field. It's identical to LoginIPEQ.
func LoginIP(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldLoginIP, v))
}

// LoginDate applies equality check predicate on the "login_date" field. It's identical to LoginDateEQ.
func LoginDate(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldLoginDate, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByContains applies the Contains predicate on the "create_by" field.
func CreateByContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldCreateBy, v))
}

// CreateByHasPrefix applies the HasPrefix predicate on the "create_by" field.
func CreateByHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldCreateBy, v))
}

// CreateByHasSuffix applies the HasSuffix predicate on the "create_by" field.
func CreateByHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldCreateBy))
}

// CreateByEqualFold applies the EqualFold predicate on the "create_by" field.
func CreateByEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldCreateBy, v))
}

// CreateByContainsFold applies the ContainsFold predicate on the "create_by" field.
func CreateByContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldCreateBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldCreatedAt))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByContains applies the Contains predicate on the "update_by" field.
func UpdateByContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldUpdateBy, v))
}

// UpdateByHasPrefix applies the HasPrefix predicate on the "update_by" field.
func UpdateByHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldUpdateBy, v))
}

// UpdateByHasSuffix applies the HasSuffix predicate on the "update_by" field.
func UpdateByHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldUpdateBy))
}

// UpdateByEqualFold applies the EqualFold predicate on the "update_by" field.
func UpdateByEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldUpdateBy, v))
}

// UpdateByContainsFold applies the ContainsFold predicate on the "update_by" field.
func UpdateByContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldUpdateBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldDeletedAt))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldTenantID, v))
}

// AccountEQ applies the EQ predicate on the "account" field.
func AccountEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldAccount, v))
}

// AccountNEQ applies the NEQ predicate on the "account" field.
func AccountNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldAccount, v))
}

// AccountIn applies the In predicate on the "account" field.
func AccountIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldAccount, vs...))
}

// AccountNotIn applies the NotIn predicate on the "account" field.
func AccountNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldAccount, vs...))
}

// AccountGT applies the GT predicate on the "account" field.
func AccountGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldAccount, v))
}

// AccountGTE applies the GTE predicate on the "account" field.
func AccountGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldAccount, v))
}

// AccountLT applies the LT predicate on the "account" field.
func AccountLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldAccount, v))
}

// AccountLTE applies the LTE predicate on the "account" field.
func AccountLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldAccount, v))
}

// AccountContains applies the Contains predicate on the "account" field.
func AccountContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldAccount, v))
}

// AccountHasPrefix applies the HasPrefix predicate on the "account" field.
func AccountHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldAccount, v))
}

// AccountHasSuffix applies the HasSuffix predicate on the "account" field.
func AccountHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldAccount, v))
}

// AccountEqualFold applies the EqualFold predicate on the "account" field.
func AccountEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldAccount, v))
}

// AccountContainsFold applies the ContainsFold predicate on the "account" field.
func AccountContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldAccount, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldPassword, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldNickname))
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldNickname))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldNickname, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldRemark, v))
}

// DeptIDEQ applies the EQ predicate on the "dept_id" field.
func DeptIDEQ(v int64) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldDeptID, v))
}

// DeptIDNEQ applies the NEQ predicate on the "dept_id" field.
func DeptIDNEQ(v int64) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldDeptID, v))
}

// DeptIDIn applies the In predicate on the "dept_id" field.
func DeptIDIn(vs ...int64) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldDeptID, vs...))
}

// DeptIDNotIn applies the NotIn predicate on the "dept_id" field.
func DeptIDNotIn(vs ...int64) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldDeptID, vs...))
}

// DeptIDGT applies the GT predicate on the "dept_id" field.
func DeptIDGT(v int64) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldDeptID, v))
}

// DeptIDGTE applies the GTE predicate on the "dept_id" field.
func DeptIDGTE(v int64) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldDeptID, v))
}

// DeptIDLT applies the LT predicate on the "dept_id" field.
func DeptIDLT(v int64) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldDeptID, v))
}

// DeptIDLTE applies the LTE predicate on the "dept_id" field.
func DeptIDLTE(v int64) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldDeptID, v))
}

// DeptIDIsNil applies the IsNil predicate on the "dept_id" field.
func DeptIDIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldDeptID))
}

// DeptIDNotNil applies the NotNil predicate on the "dept_id" field.
func DeptIDNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldDeptID))
}

// PostIdsEQ applies the EQ predicate on the "post_ids" field.
func PostIdsEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldPostIds, v))
}

// PostIdsNEQ applies the NEQ predicate on the "post_ids" field.
func PostIdsNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldPostIds, v))
}

// PostIdsIn applies the In predicate on the "post_ids" field.
func PostIdsIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldPostIds, vs...))
}

// PostIdsNotIn applies the NotIn predicate on the "post_ids" field.
func PostIdsNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldPostIds, vs...))
}

// PostIdsGT applies the GT predicate on the "post_ids" field.
func PostIdsGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldPostIds, v))
}

// PostIdsGTE applies the GTE predicate on the "post_ids" field.
func PostIdsGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldPostIds, v))
}

// PostIdsLT applies the LT predicate on the "post_ids" field.
func PostIdsLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldPostIds, v))
}

// PostIdsLTE applies the LTE predicate on the "post_ids" field.
func PostIdsLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldPostIds, v))
}

// PostIdsContains applies the Contains predicate on the "post_ids" field.
func PostIdsContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldPostIds, v))
}

// PostIdsHasPrefix applies the HasPrefix predicate on the "post_ids" field.
func PostIdsHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldPostIds, v))
}

// PostIdsHasSuffix applies the HasSuffix predicate on the "post_ids" field.
func PostIdsHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldPostIds, v))
}

// PostIdsIsNil applies the IsNil predicate on the "post_ids" field.
func PostIdsIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldPostIds))
}

// PostIdsNotNil applies the NotNil predicate on the "post_ids" field.
func PostIdsNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldPostIds))
}

// PostIdsEqualFold applies the EqualFold predicate on the "post_ids" field.
func PostIdsEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldPostIds, v))
}

// PostIdsContainsFold applies the ContainsFold predicate on the "post_ids" field.
func PostIdsContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldPostIds, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldEmail, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileIsNil applies the IsNil predicate on the "mobile" field.
func MobileIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldMobile))
}

// MobileNotNil applies the NotNil predicate on the "mobile" field.
func MobileNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldMobile))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldMobile, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldSex, vs...))
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldSex, v))
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldSex, v))
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldSex, v))
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldSex, v))
}

// SexIsNil applies the IsNil predicate on the "sex" field.
func SexIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldSex))
}

// SexNotNil applies the NotNil predicate on the "sex" field.
func SexNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldSex))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldAvatar))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldAvatar, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldStatus))
}

// LoginIPEQ applies the EQ predicate on the "login_ip" field.
func LoginIPEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldLoginIP, v))
}

// LoginIPNEQ applies the NEQ predicate on the "login_ip" field.
func LoginIPNEQ(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldLoginIP, v))
}

// LoginIPIn applies the In predicate on the "login_ip" field.
func LoginIPIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldLoginIP, vs...))
}

// LoginIPNotIn applies the NotIn predicate on the "login_ip" field.
func LoginIPNotIn(vs ...string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldLoginIP, vs...))
}

// LoginIPGT applies the GT predicate on the "login_ip" field.
func LoginIPGT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldLoginIP, v))
}

// LoginIPGTE applies the GTE predicate on the "login_ip" field.
func LoginIPGTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldLoginIP, v))
}

// LoginIPLT applies the LT predicate on the "login_ip" field.
func LoginIPLT(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldLoginIP, v))
}

// LoginIPLTE applies the LTE predicate on the "login_ip" field.
func LoginIPLTE(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldLoginIP, v))
}

// LoginIPContains applies the Contains predicate on the "login_ip" field.
func LoginIPContains(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContains(FieldLoginIP, v))
}

// LoginIPHasPrefix applies the HasPrefix predicate on the "login_ip" field.
func LoginIPHasPrefix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasPrefix(FieldLoginIP, v))
}

// LoginIPHasSuffix applies the HasSuffix predicate on the "login_ip" field.
func LoginIPHasSuffix(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldHasSuffix(FieldLoginIP, v))
}

// LoginIPIsNil applies the IsNil predicate on the "login_ip" field.
func LoginIPIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldLoginIP))
}

// LoginIPNotNil applies the NotNil predicate on the "login_ip" field.
func LoginIPNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldLoginIP))
}

// LoginIPEqualFold applies the EqualFold predicate on the "login_ip" field.
func LoginIPEqualFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEqualFold(FieldLoginIP, v))
}

// LoginIPContainsFold applies the ContainsFold predicate on the "login_ip" field.
func LoginIPContainsFold(v string) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldContainsFold(FieldLoginIP, v))
}

// LoginDateEQ applies the EQ predicate on the "login_date" field.
func LoginDateEQ(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldEQ(FieldLoginDate, v))
}

// LoginDateNEQ applies the NEQ predicate on the "login_date" field.
func LoginDateNEQ(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNEQ(FieldLoginDate, v))
}

// LoginDateIn applies the In predicate on the "login_date" field.
func LoginDateIn(vs ...time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIn(FieldLoginDate, vs...))
}

// LoginDateNotIn applies the NotIn predicate on the "login_date" field.
func LoginDateNotIn(vs ...time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotIn(FieldLoginDate, vs...))
}

// LoginDateGT applies the GT predicate on the "login_date" field.
func LoginDateGT(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGT(FieldLoginDate, v))
}

// LoginDateGTE applies the GTE predicate on the "login_date" field.
func LoginDateGTE(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldGTE(FieldLoginDate, v))
}

// LoginDateLT applies the LT predicate on the "login_date" field.
func LoginDateLT(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLT(FieldLoginDate, v))
}

// LoginDateLTE applies the LTE predicate on the "login_date" field.
func LoginDateLTE(v time.Time) predicate.SystemUser {
	return predicate.SystemUser(sql.FieldLTE(FieldLoginDate, v))
}

// LoginDateIsNil applies the IsNil predicate on the "login_date" field.
func LoginDateIsNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldIsNull(FieldLoginDate))
}

// LoginDateNotNil applies the NotNil predicate on the "login_date" field.
func LoginDateNotNil() predicate.SystemUser {
	return predicate.SystemUser(sql.FieldNotNull(FieldLoginDate))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SystemUser) predicate.SystemUser {
	return predicate.SystemUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SystemUser) predicate.SystemUser {
	return predicate.SystemUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SystemUser) predicate.SystemUser {
	return predicate.SystemUser(sql.NotPredicates(p))
}
