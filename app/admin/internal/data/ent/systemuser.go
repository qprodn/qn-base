// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"qn-base/app/admin/internal/data/ent/systemuser"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SystemUser is the model entity for the SystemUser schema.
type SystemUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建者ID
	CreateBy *string `json:"create_by,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新者ID
	UpdateBy *string `json:"update_by,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 租户id
	TenantID string `json:"tenant_id,omitempty"`
	// 用户账号
	Account string `json:"account,omitempty"`
	// 密码
	Password *string `json:"password,omitempty"`
	// 用户昵称
	Nickname *string `json:"nickname,omitempty"`
	// 备注
	Remark *string `json:"remark,omitempty"`
	// 部门ID
	DeptID *int64 `json:"dept_id,omitempty"`
	// 岗位编号数组
	PostIds *string `json:"post_ids,omitempty"`
	// 用户邮箱
	Email *string `json:"email,omitempty"`
	// 手机号码
	Mobile *string `json:"mobile,omitempty"`
	// 用户性别(0:女 1:男)
	Sex *int8 `json:"sex,omitempty"`
	// 头像地址
	Avatar *string `json:"avatar,omitempty"`
	// 帐号状态(0:停用 1:正常)
	Status int8 `json:"status,omitempty"`
	// 最后登录IP
	LoginIP *string `json:"login_ip,omitempty"`
	// 最后登录时间
	LoginDate    *time.Time `json:"login_date,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemuser.FieldID, systemuser.FieldDeptID, systemuser.FieldSex, systemuser.FieldStatus:
			values[i] = new(sql.NullInt64)
		case systemuser.FieldCreateBy, systemuser.FieldUpdateBy, systemuser.FieldTenantID, systemuser.FieldAccount, systemuser.FieldPassword, systemuser.FieldNickname, systemuser.FieldRemark, systemuser.FieldPostIds, systemuser.FieldEmail, systemuser.FieldMobile, systemuser.FieldAvatar, systemuser.FieldLoginIP:
			values[i] = new(sql.NullString)
		case systemuser.FieldCreatedAt, systemuser.FieldUpdatedAt, systemuser.FieldDeletedAt, systemuser.FieldLoginDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemUser fields.
func (_m *SystemUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case systemuser.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = new(string)
				*_m.CreateBy = value.String
			}
		case systemuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case systemuser.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = new(string)
				*_m.UpdateBy = value.String
			}
		case systemuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		case systemuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case systemuser.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case systemuser.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				_m.Account = value.String
			}
		case systemuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				_m.Password = new(string)
				*_m.Password = value.String
			}
		case systemuser.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				_m.Nickname = new(string)
				*_m.Nickname = value.String
			}
		case systemuser.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				_m.Remark = new(string)
				*_m.Remark = value.String
			}
		case systemuser.FieldDeptID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dept_id", values[i])
			} else if value.Valid {
				_m.DeptID = new(int64)
				*_m.DeptID = value.Int64
			}
		case systemuser.FieldPostIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_ids", values[i])
			} else if value.Valid {
				_m.PostIds = new(string)
				*_m.PostIds = value.String
			}
		case systemuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = new(string)
				*_m.Email = value.String
			}
		case systemuser.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				_m.Mobile = new(string)
				*_m.Mobile = value.String
			}
		case systemuser.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				_m.Sex = new(int8)
				*_m.Sex = int8(value.Int64)
			}
		case systemuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				_m.Avatar = new(string)
				*_m.Avatar = value.String
			}
		case systemuser.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = int8(value.Int64)
			}
		case systemuser.FieldLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_ip", values[i])
			} else if value.Valid {
				_m.LoginIP = new(string)
				*_m.LoginIP = value.String
			}
		case systemuser.FieldLoginDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field login_date", values[i])
			} else if value.Valid {
				_m.LoginDate = new(time.Time)
				*_m.LoginDate = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemUser.
// This includes values selected through modifiers, order, etc.
func (_m *SystemUser) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this SystemUser.
// Note that you need to call SystemUser.Unwrap() before calling this method if this SystemUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SystemUser) Update() *SystemUserUpdateOne {
	return NewSystemUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SystemUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SystemUser) Unwrap() *SystemUser {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemUser is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SystemUser) String() string {
	var builder strings.Builder
	builder.WriteString("SystemUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	if v := _m.CreateBy; v != nil {
		builder.WriteString("create_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdateBy; v != nil {
		builder.WriteString("update_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("account=")
	builder.WriteString(_m.Account)
	builder.WriteString(", ")
	if v := _m.Password; v != nil {
		builder.WriteString("password=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Nickname; v != nil {
		builder.WriteString("nickname=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.DeptID; v != nil {
		builder.WriteString("dept_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.PostIds; v != nil {
		builder.WriteString("post_ids=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Mobile; v != nil {
		builder.WriteString("mobile=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Sex; v != nil {
		builder.WriteString("sex=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Avatar; v != nil {
		builder.WriteString("avatar=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	if v := _m.LoginIP; v != nil {
		builder.WriteString("login_ip=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.LoginDate; v != nil {
		builder.WriteString("login_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SystemUsers is a parsable slice of SystemUser.
type SystemUsers []*SystemUser
