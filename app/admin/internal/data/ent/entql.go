// Code generated by ent, DO NOT EDIT.

package ent

import (
	"qn-base/app/admin/internal/data/ent/systemuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemuser.Table,
			Columns: systemuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: systemuser.FieldID,
			},
		},
		Type: "SystemUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemuser.FieldCreateBy:  {Type: field.TypeString, Column: systemuser.FieldCreateBy},
			systemuser.FieldCreatedAt: {Type: field.TypeTime, Column: systemuser.FieldCreatedAt},
			systemuser.FieldUpdateBy:  {Type: field.TypeString, Column: systemuser.FieldUpdateBy},
			systemuser.FieldUpdatedAt: {Type: field.TypeTime, Column: systemuser.FieldUpdatedAt},
			systemuser.FieldDeletedAt: {Type: field.TypeTime, Column: systemuser.FieldDeletedAt},
			systemuser.FieldTenantID:  {Type: field.TypeString, Column: systemuser.FieldTenantID},
			systemuser.FieldAccount:   {Type: field.TypeString, Column: systemuser.FieldAccount},
			systemuser.FieldPassword:  {Type: field.TypeString, Column: systemuser.FieldPassword},
			systemuser.FieldNickname:  {Type: field.TypeString, Column: systemuser.FieldNickname},
			systemuser.FieldRemark:    {Type: field.TypeString, Column: systemuser.FieldRemark},
			systemuser.FieldDeptID:    {Type: field.TypeString, Column: systemuser.FieldDeptID},
			systemuser.FieldPostIds:   {Type: field.TypeString, Column: systemuser.FieldPostIds},
			systemuser.FieldEmail:     {Type: field.TypeString, Column: systemuser.FieldEmail},
			systemuser.FieldMobile:    {Type: field.TypeString, Column: systemuser.FieldMobile},
			systemuser.FieldSex:       {Type: field.TypeInt8, Column: systemuser.FieldSex},
			systemuser.FieldAvatar:    {Type: field.TypeString, Column: systemuser.FieldAvatar},
			systemuser.FieldStatus:    {Type: field.TypeInt8, Column: systemuser.FieldStatus},
			systemuser.FieldLoginIP:   {Type: field.TypeString, Column: systemuser.FieldLoginIP},
			systemuser.FieldLoginDate: {Type: field.TypeTime, Column: systemuser.FieldLoginDate},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *SystemUserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemUserQuery builder.
func (_q *SystemUserQuery) Filter() *SystemUserFilter {
	return &SystemUserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemUserMutation builder.
func (m *SystemUserMutation) Filter() *SystemUserFilter {
	return &SystemUserFilter{config: m.config, predicateAdder: m}
}

// SystemUserFilter provides a generic filtering capability at runtime for SystemUserQuery.
type SystemUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SystemUserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldID))
}

// WhereCreateBy applies the entql string predicate on the create_by field.
func (f *SystemUserFilter) WhereCreateBy(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldCreateBy))
}

// WhereCreatedAt applies the entql times.Time predicate on the created_at field.
func (f *SystemUserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemuser.FieldCreatedAt))
}

// WhereUpdateBy applies the entql string predicate on the update_by field.
func (f *SystemUserFilter) WhereUpdateBy(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldUpdateBy))
}

// WhereUpdatedAt applies the entql times.Time predicate on the updated_at field.
func (f *SystemUserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(systemuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql times.Time predicate on the deleted_at field.
func (f *SystemUserFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(systemuser.FieldDeletedAt))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *SystemUserFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldTenantID))
}

// WhereAccount applies the entql string predicate on the account field.
func (f *SystemUserFilter) WhereAccount(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldAccount))
}

// WherePassword applies the entql string predicate on the password field.
func (f *SystemUserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldPassword))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *SystemUserFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldNickname))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SystemUserFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldRemark))
}

// WhereDeptID applies the entql string predicate on the dept_id field.
func (f *SystemUserFilter) WhereDeptID(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldDeptID))
}

// WherePostIds applies the entql string predicate on the post_ids field.
func (f *SystemUserFilter) WherePostIds(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldPostIds))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *SystemUserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldEmail))
}

// WhereMobile applies the entql string predicate on the mobile field.
func (f *SystemUserFilter) WhereMobile(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldMobile))
}

// WhereSex applies the entql int8 predicate on the sex field.
func (f *SystemUserFilter) WhereSex(p entql.Int8P) {
	f.Where(p.Field(systemuser.FieldSex))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *SystemUserFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldAvatar))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *SystemUserFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(systemuser.FieldStatus))
}

// WhereLoginIP applies the entql string predicate on the login_ip field.
func (f *SystemUserFilter) WhereLoginIP(p entql.StringP) {
	f.Where(p.Field(systemuser.FieldLoginIP))
}

// WhereLoginDate applies the entql times.Time predicate on the login_date field.
func (f *SystemUserFilter) WhereLoginDate(p entql.TimeP) {
	f.Where(p.Field(systemuser.FieldLoginDate))
}
