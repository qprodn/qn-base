// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qn-base/app/admin/internal/data/ent/systemuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemUserCreate is the builder for creating a SystemUser entity.
type SystemUserCreate struct {
	config
	mutation *SystemUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateBy sets the "create_by" field.
func (_c *SystemUserCreate) SetCreateBy(v string) *SystemUserCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableCreateBy(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *SystemUserCreate) SetCreatedAt(v time.Time) *SystemUserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableCreatedAt(v *time.Time) *SystemUserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *SystemUserCreate) SetUpdateBy(v string) *SystemUserCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableUpdateBy(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *SystemUserCreate) SetUpdatedAt(v time.Time) *SystemUserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableUpdatedAt(v *time.Time) *SystemUserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *SystemUserCreate) SetDeletedAt(v time.Time) *SystemUserCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableDeletedAt(v *time.Time) *SystemUserCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *SystemUserCreate) SetTenantID(v string) *SystemUserCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetAccount sets the "account" field.
func (_c *SystemUserCreate) SetAccount(v string) *SystemUserCreate {
	_c.mutation.SetAccount(v)
	return _c
}

// SetPassword sets the "password" field.
func (_c *SystemUserCreate) SetPassword(v string) *SystemUserCreate {
	_c.mutation.SetPassword(v)
	return _c
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillablePassword(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetPassword(*v)
	}
	return _c
}

// SetNickname sets the "nickname" field.
func (_c *SystemUserCreate) SetNickname(v string) *SystemUserCreate {
	_c.mutation.SetNickname(v)
	return _c
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableNickname(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetNickname(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *SystemUserCreate) SetRemark(v string) *SystemUserCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableRemark(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetDeptID sets the "dept_id" field.
func (_c *SystemUserCreate) SetDeptID(v int64) *SystemUserCreate {
	_c.mutation.SetDeptID(v)
	return _c
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableDeptID(v *int64) *SystemUserCreate {
	if v != nil {
		_c.SetDeptID(*v)
	}
	return _c
}

// SetPostIds sets the "post_ids" field.
func (_c *SystemUserCreate) SetPostIds(v string) *SystemUserCreate {
	_c.mutation.SetPostIds(v)
	return _c
}

// SetNillablePostIds sets the "post_ids" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillablePostIds(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetPostIds(*v)
	}
	return _c
}

// SetEmail sets the "email" field.
func (_c *SystemUserCreate) SetEmail(v string) *SystemUserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableEmail(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetEmail(*v)
	}
	return _c
}

// SetMobile sets the "mobile" field.
func (_c *SystemUserCreate) SetMobile(v string) *SystemUserCreate {
	_c.mutation.SetMobile(v)
	return _c
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableMobile(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetMobile(*v)
	}
	return _c
}

// SetSex sets the "sex" field.
func (_c *SystemUserCreate) SetSex(v int8) *SystemUserCreate {
	_c.mutation.SetSex(v)
	return _c
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableSex(v *int8) *SystemUserCreate {
	if v != nil {
		_c.SetSex(*v)
	}
	return _c
}

// SetAvatar sets the "avatar" field.
func (_c *SystemUserCreate) SetAvatar(v string) *SystemUserCreate {
	_c.mutation.SetAvatar(v)
	return _c
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableAvatar(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetAvatar(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *SystemUserCreate) SetStatus(v int8) *SystemUserCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableStatus(v *int8) *SystemUserCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetLoginIP sets the "login_ip" field.
func (_c *SystemUserCreate) SetLoginIP(v string) *SystemUserCreate {
	_c.mutation.SetLoginIP(v)
	return _c
}

// SetNillableLoginIP sets the "login_ip" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableLoginIP(v *string) *SystemUserCreate {
	if v != nil {
		_c.SetLoginIP(*v)
	}
	return _c
}

// SetLoginDate sets the "login_date" field.
func (_c *SystemUserCreate) SetLoginDate(v time.Time) *SystemUserCreate {
	_c.mutation.SetLoginDate(v)
	return _c
}

// SetNillableLoginDate sets the "login_date" field if the given value is not nil.
func (_c *SystemUserCreate) SetNillableLoginDate(v *time.Time) *SystemUserCreate {
	if v != nil {
		_c.SetLoginDate(*v)
	}
	return _c
}

// Mutation returns the SystemUserMutation object of the builder.
func (_c *SystemUserCreate) Mutation() *SystemUserMutation {
	return _c.mutation
}

// Save creates the SystemUser in the database.
func (_c *SystemUserCreate) Save(ctx context.Context) (*SystemUser, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SystemUserCreate) SaveX(ctx context.Context) *SystemUser {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SystemUserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SystemUserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SystemUserCreate) defaults() {
	if _, ok := _c.mutation.Sex(); !ok {
		v := systemuser.DefaultSex
		_c.mutation.SetSex(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := systemuser.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SystemUserCreate) check() error {
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SystemUser.tenant_id"`)}
	}
	if v, ok := _c.mutation.TenantID(); ok {
		if err := systemuser.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SystemUser.tenant_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "SystemUser.account"`)}
	}
	return nil
}

func (_c *SystemUserCreate) sqlSave(ctx context.Context) (*SystemUser, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SystemUserCreate) createSpec() (*SystemUser, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemUser{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(systemuser.Table, sqlgraph.NewFieldSpec(systemuser.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(systemuser.FieldCreateBy, field.TypeString, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(systemuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(systemuser.FieldUpdateBy, field.TypeString, value)
		_node.UpdateBy = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(systemuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(systemuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(systemuser.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.Account(); ok {
		_spec.SetField(systemuser.FieldAccount, field.TypeString, value)
		_node.Account = value
	}
	if value, ok := _c.mutation.Password(); ok {
		_spec.SetField(systemuser.FieldPassword, field.TypeString, value)
		_node.Password = &value
	}
	if value, ok := _c.mutation.Nickname(); ok {
		_spec.SetField(systemuser.FieldNickname, field.TypeString, value)
		_node.Nickname = &value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(systemuser.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.DeptID(); ok {
		_spec.SetField(systemuser.FieldDeptID, field.TypeInt64, value)
		_node.DeptID = &value
	}
	if value, ok := _c.mutation.PostIds(); ok {
		_spec.SetField(systemuser.FieldPostIds, field.TypeString, value)
		_node.PostIds = &value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(systemuser.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := _c.mutation.Mobile(); ok {
		_spec.SetField(systemuser.FieldMobile, field.TypeString, value)
		_node.Mobile = &value
	}
	if value, ok := _c.mutation.Sex(); ok {
		_spec.SetField(systemuser.FieldSex, field.TypeInt8, value)
		_node.Sex = &value
	}
	if value, ok := _c.mutation.Avatar(); ok {
		_spec.SetField(systemuser.FieldAvatar, field.TypeString, value)
		_node.Avatar = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(systemuser.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.LoginIP(); ok {
		_spec.SetField(systemuser.FieldLoginIP, field.TypeString, value)
		_node.LoginIP = &value
	}
	if value, ok := _c.mutation.LoginDate(); ok {
		_spec.SetField(systemuser.FieldLoginDate, field.TypeTime, value)
		_node.LoginDate = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemUser.Create().
//		SetCreateBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemUserUpsert) {
//			SetCreateBy(v+v).
//		}).
//		Exec(ctx)
func (_c *SystemUserCreate) OnConflict(opts ...sql.ConflictOption) *SystemUserUpsertOne {
	_c.conflict = opts
	return &SystemUserUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SystemUserCreate) OnConflictColumns(columns ...string) *SystemUserUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SystemUserUpsertOne{
		create: _c,
	}
}

type (
	// SystemUserUpsertOne is the builder for "upsert"-ing
	//  one SystemUser node.
	SystemUserUpsertOne struct {
		create *SystemUserCreate
	}

	// SystemUserUpsert is the "OnConflict" setter.
	SystemUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateBy sets the "create_by" field.
func (u *SystemUserUpsert) SetCreateBy(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateCreateBy() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldCreateBy)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *SystemUserUpsert) ClearCreateBy() *SystemUserUpsert {
	u.SetNull(systemuser.FieldCreateBy)
	return u
}

// SetUpdateBy sets the "update_by" field.
func (u *SystemUserUpsert) SetUpdateBy(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldUpdateBy, v)
	return u
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateUpdateBy() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldUpdateBy)
	return u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *SystemUserUpsert) ClearUpdateBy() *SystemUserUpsert {
	u.SetNull(systemuser.FieldUpdateBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemUserUpsert) SetUpdatedAt(v time.Time) *SystemUserUpsert {
	u.Set(systemuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateUpdatedAt() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SystemUserUpsert) ClearUpdatedAt() *SystemUserUpsert {
	u.SetNull(systemuser.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SystemUserUpsert) SetDeletedAt(v time.Time) *SystemUserUpsert {
	u.Set(systemuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateDeletedAt() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SystemUserUpsert) ClearDeletedAt() *SystemUserUpsert {
	u.SetNull(systemuser.FieldDeletedAt)
	return u
}

// SetAccount sets the "account" field.
func (u *SystemUserUpsert) SetAccount(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldAccount, v)
	return u
}

// UpdateAccount sets the "account" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateAccount() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldAccount)
	return u
}

// SetPassword sets the "password" field.
func (u *SystemUserUpsert) SetPassword(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdatePassword() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *SystemUserUpsert) ClearPassword() *SystemUserUpsert {
	u.SetNull(systemuser.FieldPassword)
	return u
}

// SetNickname sets the "nickname" field.
func (u *SystemUserUpsert) SetNickname(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateNickname() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldNickname)
	return u
}

// ClearNickname clears the value of the "nickname" field.
func (u *SystemUserUpsert) ClearNickname() *SystemUserUpsert {
	u.SetNull(systemuser.FieldNickname)
	return u
}

// SetRemark sets the "remark" field.
func (u *SystemUserUpsert) SetRemark(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateRemark() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *SystemUserUpsert) ClearRemark() *SystemUserUpsert {
	u.SetNull(systemuser.FieldRemark)
	return u
}

// SetDeptID sets the "dept_id" field.
func (u *SystemUserUpsert) SetDeptID(v int64) *SystemUserUpsert {
	u.Set(systemuser.FieldDeptID, v)
	return u
}

// UpdateDeptID sets the "dept_id" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateDeptID() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldDeptID)
	return u
}

// AddDeptID adds v to the "dept_id" field.
func (u *SystemUserUpsert) AddDeptID(v int64) *SystemUserUpsert {
	u.Add(systemuser.FieldDeptID, v)
	return u
}

// ClearDeptID clears the value of the "dept_id" field.
func (u *SystemUserUpsert) ClearDeptID() *SystemUserUpsert {
	u.SetNull(systemuser.FieldDeptID)
	return u
}

// SetPostIds sets the "post_ids" field.
func (u *SystemUserUpsert) SetPostIds(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldPostIds, v)
	return u
}

// UpdatePostIds sets the "post_ids" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdatePostIds() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldPostIds)
	return u
}

// ClearPostIds clears the value of the "post_ids" field.
func (u *SystemUserUpsert) ClearPostIds() *SystemUserUpsert {
	u.SetNull(systemuser.FieldPostIds)
	return u
}

// SetEmail sets the "email" field.
func (u *SystemUserUpsert) SetEmail(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateEmail() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *SystemUserUpsert) ClearEmail() *SystemUserUpsert {
	u.SetNull(systemuser.FieldEmail)
	return u
}

// SetMobile sets the "mobile" field.
func (u *SystemUserUpsert) SetMobile(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldMobile, v)
	return u
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateMobile() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldMobile)
	return u
}

// ClearMobile clears the value of the "mobile" field.
func (u *SystemUserUpsert) ClearMobile() *SystemUserUpsert {
	u.SetNull(systemuser.FieldMobile)
	return u
}

// SetSex sets the "sex" field.
func (u *SystemUserUpsert) SetSex(v int8) *SystemUserUpsert {
	u.Set(systemuser.FieldSex, v)
	return u
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateSex() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldSex)
	return u
}

// AddSex adds v to the "sex" field.
func (u *SystemUserUpsert) AddSex(v int8) *SystemUserUpsert {
	u.Add(systemuser.FieldSex, v)
	return u
}

// ClearSex clears the value of the "sex" field.
func (u *SystemUserUpsert) ClearSex() *SystemUserUpsert {
	u.SetNull(systemuser.FieldSex)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *SystemUserUpsert) SetAvatar(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateAvatar() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldAvatar)
	return u
}

// ClearAvatar clears the value of the "avatar" field.
func (u *SystemUserUpsert) ClearAvatar() *SystemUserUpsert {
	u.SetNull(systemuser.FieldAvatar)
	return u
}

// SetStatus sets the "status" field.
func (u *SystemUserUpsert) SetStatus(v int8) *SystemUserUpsert {
	u.Set(systemuser.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateStatus() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SystemUserUpsert) AddStatus(v int8) *SystemUserUpsert {
	u.Add(systemuser.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *SystemUserUpsert) ClearStatus() *SystemUserUpsert {
	u.SetNull(systemuser.FieldStatus)
	return u
}

// SetLoginIP sets the "login_ip" field.
func (u *SystemUserUpsert) SetLoginIP(v string) *SystemUserUpsert {
	u.Set(systemuser.FieldLoginIP, v)
	return u
}

// UpdateLoginIP sets the "login_ip" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateLoginIP() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldLoginIP)
	return u
}

// ClearLoginIP clears the value of the "login_ip" field.
func (u *SystemUserUpsert) ClearLoginIP() *SystemUserUpsert {
	u.SetNull(systemuser.FieldLoginIP)
	return u
}

// SetLoginDate sets the "login_date" field.
func (u *SystemUserUpsert) SetLoginDate(v time.Time) *SystemUserUpsert {
	u.Set(systemuser.FieldLoginDate, v)
	return u
}

// UpdateLoginDate sets the "login_date" field to the value that was provided on create.
func (u *SystemUserUpsert) UpdateLoginDate() *SystemUserUpsert {
	u.SetExcluded(systemuser.FieldLoginDate)
	return u
}

// ClearLoginDate clears the value of the "login_date" field.
func (u *SystemUserUpsert) ClearLoginDate() *SystemUserUpsert {
	u.SetNull(systemuser.FieldLoginDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SystemUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemUserUpsertOne) UpdateNewValues() *SystemUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(systemuser.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(systemuser.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemUserUpsertOne) Ignore() *SystemUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemUserUpsertOne) DoNothing() *SystemUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemUserCreate.OnConflict
// documentation for more info.
func (u *SystemUserUpsertOne) Update(set func(*SystemUserUpsert)) *SystemUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *SystemUserUpsertOne) SetCreateBy(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateCreateBy() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *SystemUserUpsertOne) ClearCreateBy() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *SystemUserUpsertOne) SetUpdateBy(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateUpdateBy() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *SystemUserUpsertOne) ClearUpdateBy() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearUpdateBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemUserUpsertOne) SetUpdatedAt(v time.Time) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateUpdatedAt() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SystemUserUpsertOne) ClearUpdatedAt() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SystemUserUpsertOne) SetDeletedAt(v time.Time) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateDeletedAt() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SystemUserUpsertOne) ClearDeletedAt() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAccount sets the "account" field.
func (u *SystemUserUpsertOne) SetAccount(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetAccount(v)
	})
}

// UpdateAccount sets the "account" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateAccount() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateAccount()
	})
}

// SetPassword sets the "password" field.
func (u *SystemUserUpsertOne) SetPassword(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdatePassword() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *SystemUserUpsertOne) ClearPassword() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearPassword()
	})
}

// SetNickname sets the "nickname" field.
func (u *SystemUserUpsertOne) SetNickname(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateNickname() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *SystemUserUpsertOne) ClearNickname() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearNickname()
	})
}

// SetRemark sets the "remark" field.
func (u *SystemUserUpsertOne) SetRemark(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateRemark() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SystemUserUpsertOne) ClearRemark() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearRemark()
	})
}

// SetDeptID sets the "dept_id" field.
func (u *SystemUserUpsertOne) SetDeptID(v int64) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetDeptID(v)
	})
}

// AddDeptID adds v to the "dept_id" field.
func (u *SystemUserUpsertOne) AddDeptID(v int64) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.AddDeptID(v)
	})
}

// UpdateDeptID sets the "dept_id" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateDeptID() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateDeptID()
	})
}

// ClearDeptID clears the value of the "dept_id" field.
func (u *SystemUserUpsertOne) ClearDeptID() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearDeptID()
	})
}

// SetPostIds sets the "post_ids" field.
func (u *SystemUserUpsertOne) SetPostIds(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetPostIds(v)
	})
}

// UpdatePostIds sets the "post_ids" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdatePostIds() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdatePostIds()
	})
}

// ClearPostIds clears the value of the "post_ids" field.
func (u *SystemUserUpsertOne) ClearPostIds() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearPostIds()
	})
}

// SetEmail sets the "email" field.
func (u *SystemUserUpsertOne) SetEmail(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateEmail() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *SystemUserUpsertOne) ClearEmail() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearEmail()
	})
}

// SetMobile sets the "mobile" field.
func (u *SystemUserUpsertOne) SetMobile(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateMobile() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *SystemUserUpsertOne) ClearMobile() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearMobile()
	})
}

// SetSex sets the "sex" field.
func (u *SystemUserUpsertOne) SetSex(v int8) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetSex(v)
	})
}

// AddSex adds v to the "sex" field.
func (u *SystemUserUpsertOne) AddSex(v int8) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.AddSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateSex() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateSex()
	})
}

// ClearSex clears the value of the "sex" field.
func (u *SystemUserUpsertOne) ClearSex() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearSex()
	})
}

// SetAvatar sets the "avatar" field.
func (u *SystemUserUpsertOne) SetAvatar(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateAvatar() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *SystemUserUpsertOne) ClearAvatar() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearAvatar()
	})
}

// SetStatus sets the "status" field.
func (u *SystemUserUpsertOne) SetStatus(v int8) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SystemUserUpsertOne) AddStatus(v int8) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateStatus() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SystemUserUpsertOne) ClearStatus() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearStatus()
	})
}

// SetLoginIP sets the "login_ip" field.
func (u *SystemUserUpsertOne) SetLoginIP(v string) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetLoginIP(v)
	})
}

// UpdateLoginIP sets the "login_ip" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateLoginIP() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateLoginIP()
	})
}

// ClearLoginIP clears the value of the "login_ip" field.
func (u *SystemUserUpsertOne) ClearLoginIP() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearLoginIP()
	})
}

// SetLoginDate sets the "login_date" field.
func (u *SystemUserUpsertOne) SetLoginDate(v time.Time) *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetLoginDate(v)
	})
}

// UpdateLoginDate sets the "login_date" field to the value that was provided on create.
func (u *SystemUserUpsertOne) UpdateLoginDate() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateLoginDate()
	})
}

// ClearLoginDate clears the value of the "login_date" field.
func (u *SystemUserUpsertOne) ClearLoginDate() *SystemUserUpsertOne {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearLoginDate()
	})
}

// Exec executes the query.
func (u *SystemUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemUserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemUserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemUserCreateBulk is the builder for creating many SystemUser entities in bulk.
type SystemUserCreateBulk struct {
	config
	err      error
	builders []*SystemUserCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemUser entities in the database.
func (_c *SystemUserCreateBulk) Save(ctx context.Context) ([]*SystemUser, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SystemUser, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SystemUserCreateBulk) SaveX(ctx context.Context) []*SystemUser {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SystemUserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SystemUserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemUserUpsert) {
//			SetCreateBy(v+v).
//		}).
//		Exec(ctx)
func (_c *SystemUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemUserUpsertBulk {
	_c.conflict = opts
	return &SystemUserUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SystemUserCreateBulk) OnConflictColumns(columns ...string) *SystemUserUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SystemUserUpsertBulk{
		create: _c,
	}
}

// SystemUserUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemUser nodes.
type SystemUserUpsertBulk struct {
	create *SystemUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemUserUpsertBulk) UpdateNewValues() *SystemUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(systemuser.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(systemuser.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemUserUpsertBulk) Ignore() *SystemUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemUserUpsertBulk) DoNothing() *SystemUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemUserCreateBulk.OnConflict
// documentation for more info.
func (u *SystemUserUpsertBulk) Update(set func(*SystemUserUpsert)) *SystemUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *SystemUserUpsertBulk) SetCreateBy(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateCreateBy() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *SystemUserUpsertBulk) ClearCreateBy() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearCreateBy()
	})
}

// SetUpdateBy sets the "update_by" field.
func (u *SystemUserUpsertBulk) SetUpdateBy(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetUpdateBy(v)
	})
}

// UpdateUpdateBy sets the "update_by" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateUpdateBy() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateUpdateBy()
	})
}

// ClearUpdateBy clears the value of the "update_by" field.
func (u *SystemUserUpsertBulk) ClearUpdateBy() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearUpdateBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemUserUpsertBulk) SetUpdatedAt(v time.Time) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateUpdatedAt() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SystemUserUpsertBulk) ClearUpdatedAt() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SystemUserUpsertBulk) SetDeletedAt(v time.Time) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateDeletedAt() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SystemUserUpsertBulk) ClearDeletedAt() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAccount sets the "account" field.
func (u *SystemUserUpsertBulk) SetAccount(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetAccount(v)
	})
}

// UpdateAccount sets the "account" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateAccount() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateAccount()
	})
}

// SetPassword sets the "password" field.
func (u *SystemUserUpsertBulk) SetPassword(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdatePassword() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *SystemUserUpsertBulk) ClearPassword() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearPassword()
	})
}

// SetNickname sets the "nickname" field.
func (u *SystemUserUpsertBulk) SetNickname(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateNickname() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *SystemUserUpsertBulk) ClearNickname() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearNickname()
	})
}

// SetRemark sets the "remark" field.
func (u *SystemUserUpsertBulk) SetRemark(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateRemark() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SystemUserUpsertBulk) ClearRemark() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearRemark()
	})
}

// SetDeptID sets the "dept_id" field.
func (u *SystemUserUpsertBulk) SetDeptID(v int64) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetDeptID(v)
	})
}

// AddDeptID adds v to the "dept_id" field.
func (u *SystemUserUpsertBulk) AddDeptID(v int64) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.AddDeptID(v)
	})
}

// UpdateDeptID sets the "dept_id" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateDeptID() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateDeptID()
	})
}

// ClearDeptID clears the value of the "dept_id" field.
func (u *SystemUserUpsertBulk) ClearDeptID() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearDeptID()
	})
}

// SetPostIds sets the "post_ids" field.
func (u *SystemUserUpsertBulk) SetPostIds(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetPostIds(v)
	})
}

// UpdatePostIds sets the "post_ids" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdatePostIds() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdatePostIds()
	})
}

// ClearPostIds clears the value of the "post_ids" field.
func (u *SystemUserUpsertBulk) ClearPostIds() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearPostIds()
	})
}

// SetEmail sets the "email" field.
func (u *SystemUserUpsertBulk) SetEmail(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateEmail() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *SystemUserUpsertBulk) ClearEmail() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearEmail()
	})
}

// SetMobile sets the "mobile" field.
func (u *SystemUserUpsertBulk) SetMobile(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateMobile() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *SystemUserUpsertBulk) ClearMobile() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearMobile()
	})
}

// SetSex sets the "sex" field.
func (u *SystemUserUpsertBulk) SetSex(v int8) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetSex(v)
	})
}

// AddSex adds v to the "sex" field.
func (u *SystemUserUpsertBulk) AddSex(v int8) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.AddSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateSex() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateSex()
	})
}

// ClearSex clears the value of the "sex" field.
func (u *SystemUserUpsertBulk) ClearSex() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearSex()
	})
}

// SetAvatar sets the "avatar" field.
func (u *SystemUserUpsertBulk) SetAvatar(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateAvatar() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *SystemUserUpsertBulk) ClearAvatar() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearAvatar()
	})
}

// SetStatus sets the "status" field.
func (u *SystemUserUpsertBulk) SetStatus(v int8) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SystemUserUpsertBulk) AddStatus(v int8) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateStatus() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SystemUserUpsertBulk) ClearStatus() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearStatus()
	})
}

// SetLoginIP sets the "login_ip" field.
func (u *SystemUserUpsertBulk) SetLoginIP(v string) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetLoginIP(v)
	})
}

// UpdateLoginIP sets the "login_ip" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateLoginIP() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateLoginIP()
	})
}

// ClearLoginIP clears the value of the "login_ip" field.
func (u *SystemUserUpsertBulk) ClearLoginIP() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearLoginIP()
	})
}

// SetLoginDate sets the "login_date" field.
func (u *SystemUserUpsertBulk) SetLoginDate(v time.Time) *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.SetLoginDate(v)
	})
}

// UpdateLoginDate sets the "login_date" field to the value that was provided on create.
func (u *SystemUserUpsertBulk) UpdateLoginDate() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.UpdateLoginDate()
	})
}

// ClearLoginDate clears the value of the "login_date" field.
func (u *SystemUserUpsertBulk) ClearLoginDate() *SystemUserUpsertBulk {
	return u.Update(func(s *SystemUserUpsert) {
		s.ClearLoginDate()
	})
}

// Exec executes the query.
func (u *SystemUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
