// Code generated by MockGen. DO NOT EDIT.
// Source: app/admin/internal/biz/systemuser/system_user_biz.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	systemuser "qn-base/app/admin/internal/biz/systemuser"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSystemUserRepo is a mock of SystemUserRepo interface.
type MockSystemUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSystemUserRepoMockRecorder
}

// MockSystemUserRepoMockRecorder is the mock recorder for MockSystemUserRepo.
type MockSystemUserRepoMockRecorder struct {
	mock *MockSystemUserRepo
}

// NewMockSystemUserRepo creates a new mock instance.
func NewMockSystemUserRepo(ctrl *gomock.Controller) *MockSystemUserRepo {
	mock := &MockSystemUserRepo{ctrl: ctrl}
	mock.recorder = &MockSystemUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemUserRepo) EXPECT() *MockSystemUserRepoMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockSystemUserRepo) BatchDelete(arg0 context.Context, arg1 []string) (int32, int32, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockSystemUserRepoMockRecorder) BatchDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockSystemUserRepo)(nil).BatchDelete), arg0, arg1)
}

// ChangeStatus mocks base method.
func (m *MockSystemUserRepo) ChangeStatus(arg0 context.Context, arg1 string, arg2 int8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockSystemUserRepoMockRecorder) ChangeStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockSystemUserRepo)(nil).ChangeStatus), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockSystemUserRepo) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSystemUserRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSystemUserRepo)(nil).Delete), arg0, arg1)
}

// FindByEmail mocks base method.
func (m *MockSystemUserRepo) FindByEmail(arg0 context.Context, arg1 string) (*systemuser.SystemUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0, arg1)
	ret0, _ := ret[0].(*systemuser.SystemUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockSystemUserRepoMockRecorder) FindByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockSystemUserRepo)(nil).FindByEmail), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockSystemUserRepo) FindByID(arg0 context.Context, arg1 string) (*systemuser.SystemUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*systemuser.SystemUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSystemUserRepoMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSystemUserRepo)(nil).FindByID), arg0, arg1)
}

// FindByMobile mocks base method.
func (m *MockSystemUserRepo) FindByMobile(arg0 context.Context, arg1 string) (*systemuser.SystemUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMobile", arg0, arg1)
	ret0, _ := ret[0].(*systemuser.SystemUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMobile indicates an expected call of FindByMobile.
func (mr *MockSystemUserRepoMockRecorder) FindByMobile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMobile", reflect.TypeOf((*MockSystemUserRepo)(nil).FindByMobile), arg0, arg1)
}

// FindByUsername mocks base method.
func (m *MockSystemUserRepo) FindByUsername(arg0 context.Context, arg1 string) (*systemuser.SystemUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", arg0, arg1)
	ret0, _ := ret[0].(*systemuser.SystemUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockSystemUserRepoMockRecorder) FindByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockSystemUserRepo)(nil).FindByUsername), arg0, arg1)
}

// GetUserStats mocks base method.
func (m *MockSystemUserRepo) GetUserStats(arg0 context.Context, arg1 string) (*systemuser.UserStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStats", arg0, arg1)
	ret0, _ := ret[0].(*systemuser.UserStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStats indicates an expected call of GetUserStats.
func (mr *MockSystemUserRepoMockRecorder) GetUserStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStats", reflect.TypeOf((*MockSystemUserRepo)(nil).GetUserStats), arg0, arg1)
}

// ListSystemUsers mocks base method.
func (m *MockSystemUserRepo) ListSystemUsers(arg0 context.Context, arg1 *systemuser.ListUserRequest) ([]*systemuser.SystemUser, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSystemUsers", arg0, arg1)
	ret0, _ := ret[0].([]*systemuser.SystemUser)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSystemUsers indicates an expected call of ListSystemUsers.
func (mr *MockSystemUserRepoMockRecorder) ListSystemUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSystemUsers", reflect.TypeOf((*MockSystemUserRepo)(nil).ListSystemUsers), arg0, arg1)
}

// Save mocks base method.
func (m *MockSystemUserRepo) Save(arg0 context.Context, arg1 *systemuser.SystemUser) (*systemuser.SystemUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(*systemuser.SystemUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockSystemUserRepoMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSystemUserRepo)(nil).Save), arg0, arg1)
}

// Update mocks base method.
func (m *MockSystemUserRepo) Update(arg0 context.Context, arg1 *systemuser.SystemUser) (*systemuser.SystemUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*systemuser.SystemUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSystemUserRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSystemUserRepo)(nil).Update), arg0, arg1)
}
