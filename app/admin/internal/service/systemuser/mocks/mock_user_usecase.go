// Code generated by MockGen. DO NOT EDIT.
// Source: manually created interface

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	systemuser "qn-base/app/admin/internal/biz/systemuser"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// UserUsecaseInterface represents the UserUsecase interface
type UserUsecaseInterface interface {
	CreateUser(ctx context.Context, u *systemuser.SystemUser) (*systemuser.SystemUser, error)
	GetUser(ctx context.Context, id string) (*systemuser.SystemUser, error)
	UpdateUser(ctx context.Context, u *systemuser.SystemUser) (*systemuser.SystemUser, error)
	DeleteUser(ctx context.Context, id string) error
	BatchDeleteUsers(ctx context.Context, ids []string) (*systemuser.BatchDeleteResult, error)
	ChangeUserStatus(ctx context.Context, id string, status int8) error
	ResetPassword(ctx context.Context, id, newPassword string) error
	CheckAccountExists(ctx context.Context, account string) (bool, error)
	GetUserStats(ctx context.Context, tenantID string) (*systemuser.UserStats, error)
	ListUsers(ctx context.Context, req *systemuser.ListUserRequest) ([]*systemuser.SystemUser, int32, error)
}

// MockUserUsecase is a mock of UserUsecaseInterface interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserUsecase) CreateUser(ctx context.Context, u *systemuser.SystemUser) (*systemuser.SystemUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(*systemuser.SystemUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUsecaseMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUsecase)(nil).CreateUser), ctx, u)
}

// GetUser mocks base method.
func (m *MockUserUsecase) GetUser(ctx context.Context, id string) (*systemuser.SystemUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*systemuser.SystemUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserUsecaseMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserUsecase)(nil).GetUser), ctx, id)
}

// UpdateUser mocks base method.
func (m *MockUserUsecase) UpdateUser(ctx context.Context, u *systemuser.SystemUser) (*systemuser.SystemUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(*systemuser.SystemUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserUsecaseMockRecorder) UpdateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserUsecase)(nil).UpdateUser), ctx, u)
}

// DeleteUser mocks base method.
func (m *MockUserUsecase) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserUsecaseMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserUsecase)(nil).DeleteUser), ctx, id)
}

// BatchDeleteUsers mocks base method.
func (m *MockUserUsecase) BatchDeleteUsers(ctx context.Context, ids []string) (*systemuser.BatchDeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteUsers", ctx, ids)
	ret0, _ := ret[0].(*systemuser.BatchDeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteUsers indicates an expected call of BatchDeleteUsers.
func (mr *MockUserUsecaseMockRecorder) BatchDeleteUsers(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteUsers", reflect.TypeOf((*MockUserUsecase)(nil).BatchDeleteUsers), ctx, ids)
}

// ChangeUserStatus mocks base method.
func (m *MockUserUsecase) ChangeUserStatus(ctx context.Context, id string, status int8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserStatus indicates an expected call of ChangeUserStatus.
func (mr *MockUserUsecaseMockRecorder) ChangeUserStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserStatus", reflect.TypeOf((*MockUserUsecase)(nil).ChangeUserStatus), ctx, id, status)
}

// ResetPassword mocks base method.
func (m *MockUserUsecase) ResetPassword(ctx context.Context, id, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, id, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserUsecaseMockRecorder) ResetPassword(ctx, id, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserUsecase)(nil).ResetPassword), ctx, id, newPassword)
}

// CheckAccountExists mocks base method.
func (m *MockUserUsecase) CheckAccountExists(ctx context.Context, account string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccountExists", ctx, account)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccountExists indicates an expected call of CheckAccountExists.
func (mr *MockUserUsecaseMockRecorder) CheckAccountExists(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccountExists", reflect.TypeOf((*MockUserUsecase)(nil).CheckAccountExists), ctx, account)
}

// GetUserStats mocks base method.
func (m *MockUserUsecase) GetUserStats(ctx context.Context, tenantID string) (*systemuser.UserStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStats", ctx, tenantID)
	ret0, _ := ret[0].(*systemuser.UserStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStats indicates an expected call of GetUserStats.
func (mr *MockUserUsecaseMockRecorder) GetUserStats(ctx, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStats", reflect.TypeOf((*MockUserUsecase)(nil).GetUserStats), ctx, tenantID)
}

// ListUsers mocks base method.
func (m *MockUserUsecase) ListUsers(ctx context.Context, req *systemuser.ListUserRequest) ([]*systemuser.SystemUser, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, req)
	ret0, _ := ret[0].([]*systemuser.SystemUser)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserUsecaseMockRecorder) ListUsers(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserUsecase)(nil).ListUsers), ctx, req)
}
