// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/system_user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Account

	// no validation rules for Nickname

	// no validation rules for Remark

	// no validation rules for DeptId

	// no validation rules for PostIds

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Sex

	// no validation rules for Avatar

	// no validation rules for Status

	// no validation rules for LoginIp

	// no validation rules for LoginDate

	// no validation rules for TenantId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 50 {
		err := CreateUserRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateUserRequest_Account_Pattern.MatchString(m.GetAccount()) {
		err := CreateUserRequestValidationError{
			field:  "Account",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 128 {
		err := CreateUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Nickname != nil {

		if utf8.RuneCountInString(m.GetNickname()) > 50 {
			err := CreateUserRequestValidationError{
				field:  "Nickname",
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Remark != nil {

		if utf8.RuneCountInString(m.GetRemark()) > 255 {
			err := CreateUserRequestValidationError{
				field:  "Remark",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DeptId != nil {
		// no validation rules for DeptId
	}

	if m.PostIds != nil {
		// no validation rules for PostIds
	}

	if m.Email != nil {

		if !_CreateUserRequest_Email_Pattern.MatchString(m.GetEmail()) {
			err := CreateUserRequestValidationError{
				field:  "Email",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Mobile != nil {

		if !_CreateUserRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
			err := CreateUserRequestValidationError{
				field:  "Mobile",
				reason: "value does not match regex pattern \"^1[3-9]\\\\d{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Sex != nil {

		if _, ok := _CreateUserRequest_Sex_InLookup[m.GetSex()]; !ok {
			err := CreateUserRequestValidationError{
				field:  "Sex",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Avatar != nil {

		if utf8.RuneCountInString(m.GetAvatar()) > 255 {
			err := CreateUserRequestValidationError{
				field:  "Avatar",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.LoginIp != nil {
		// no validation rules for LoginIp
	}

	if m.LoginDate != nil {
		// no validation rules for LoginDate
	}

	if m.TenantId != nil {
		// no validation rules for TenantId
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

var _CreateUserRequest_Account_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+$")

var _CreateUserRequest_Email_Pattern = regexp.MustCompile("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")

var _CreateUserRequest_Mobile_Pattern = regexp.MustCompile("^1[3-9]\\d{9}$")

var _CreateUserRequest_Sex_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReplyMultiError, or nil if none found.
func (m *CreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserReplyMultiError(errors)
	}

	return nil
}

// CreateUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReplyMultiError) AllErrors() []error { return m }

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetUserRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateUserRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Nickname != nil {

		if utf8.RuneCountInString(m.GetNickname()) > 50 {
			err := UpdateUserRequestValidationError{
				field:  "Nickname",
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Remark != nil {

		if utf8.RuneCountInString(m.GetRemark()) > 255 {
			err := UpdateUserRequestValidationError{
				field:  "Remark",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DeptId != nil {
		// no validation rules for DeptId
	}

	if m.PostIds != nil {
		// no validation rules for PostIds
	}

	if m.Email != nil {

		if !_UpdateUserRequest_Email_Pattern.MatchString(m.GetEmail()) {
			err := UpdateUserRequestValidationError{
				field:  "Email",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Mobile != nil {

		if !_UpdateUserRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
			err := UpdateUserRequestValidationError{
				field:  "Mobile",
				reason: "value does not match regex pattern \"^1[3-9]\\\\d{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Sex != nil {

		if _, ok := _UpdateUserRequest_Sex_InLookup[m.GetSex()]; !ok {
			err := UpdateUserRequestValidationError{
				field:  "Sex",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Avatar != nil {

		if utf8.RuneCountInString(m.GetAvatar()) > 255 {
			err := UpdateUserRequestValidationError{
				field:  "Avatar",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {

		if _, ok := _UpdateUserRequest_Status_InLookup[m.GetStatus()]; !ok {
			err := UpdateUserRequestValidationError{
				field:  "Status",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.LoginIp != nil {
		// no validation rules for LoginIp
	}

	if m.LoginDate != nil {
		// no validation rules for LoginDate
	}

	if m.TenantId != nil {
		// no validation rules for TenantId
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

var _UpdateUserRequest_Email_Pattern = regexp.MustCompile("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")

var _UpdateUserRequest_Mobile_Pattern = regexp.MustCompile("^1[3-9]\\d{9}$")

var _UpdateUserRequest_Sex_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

var _UpdateUserRequest_Status_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on UpdateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserReplyMultiError, or nil if none found.
func (m *UpdateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserReplyMultiError(errors)
	}

	return nil
}

// UpdateUserReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReplyMultiError) AllErrors() []error { return m }

// UpdateUserReplyValidationError is the validation error returned by
// UpdateUserReply.Validate if the designated constraints aren't met.
type UpdateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReplyValidationError) ErrorName() string { return "UpdateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReplyValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteUserRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserReplyMultiError, or nil if none found.
func (m *DeleteUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteUserReplyMultiError(errors)
	}

	return nil
}

// DeleteUserReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReplyMultiError) AllErrors() []error { return m }

// DeleteUserReplyValidationError is the validation error returned by
// DeleteUserReply.Validate if the designated constraints aren't met.
type DeleteUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReplyValidationError) ErrorName() string { return "DeleteUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReplyValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {

		if m.GetPage() < 1 {
			err := ListUsersRequestValidationError{
				field:  "Page",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.PageSize != nil {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListUsersRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Account != nil {
		// no validation rules for Account
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Mobile != nil {
		// no validation rules for Mobile
	}

	if m.Status != nil {

		if _, ok := _ListUsersRequest_Status_InLookup[m.GetStatus()]; !ok {
			err := ListUsersRequestValidationError{
				field:  "Status",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DeptId != nil {
		// no validation rules for DeptId
	}

	if m.StartDate != nil {
		// no validation rules for StartDate
	}

	if m.EndDate != nil {
		// no validation rules for EndDate
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

var _ListUsersRequest_Status_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on ListUsersReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUsersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUsersReplyMultiError,
// or nil if none found.
func (m *ListUsersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUsersReplyMultiError(errors)
	}

	return nil
}

// ListUsersReplyMultiError is an error wrapping multiple validation errors
// returned by ListUsersReply.ValidateAll() if the designated constraints
// aren't met.
type ListUsersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersReplyMultiError) AllErrors() []error { return m }

// ListUsersReplyValidationError is the validation error returned by
// ListUsersReply.Validate if the designated constraints aren't met.
type ListUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersReplyValidationError) ErrorName() string { return "ListUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersReplyValidationError{}

// Validate checks the field values on BatchDeleteUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeleteUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeleteUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeleteUsersRequestMultiError, or nil if none found.
func (m *BatchDeleteUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeleteUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 100 {
		err := BatchDeleteUsersRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatchDeleteUsersRequestMultiError(errors)
	}

	return nil
}

// BatchDeleteUsersRequestMultiError is an error wrapping multiple validation
// errors returned by BatchDeleteUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchDeleteUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeleteUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeleteUsersRequestMultiError) AllErrors() []error { return m }

// BatchDeleteUsersRequestValidationError is the validation error returned by
// BatchDeleteUsersRequest.Validate if the designated constraints aren't met.
type BatchDeleteUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteUsersRequestValidationError) ErrorName() string {
	return "BatchDeleteUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteUsersRequestValidationError{}

// Validate checks the field values on BatchDeleteUsersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeleteUsersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeleteUsersReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeleteUsersReplyMultiError, or nil if none found.
func (m *BatchDeleteUsersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeleteUsersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SuccessCount

	// no validation rules for FailedCount

	if len(errors) > 0 {
		return BatchDeleteUsersReplyMultiError(errors)
	}

	return nil
}

// BatchDeleteUsersReplyMultiError is an error wrapping multiple validation
// errors returned by BatchDeleteUsersReply.ValidateAll() if the designated
// constraints aren't met.
type BatchDeleteUsersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeleteUsersReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeleteUsersReplyMultiError) AllErrors() []error { return m }

// BatchDeleteUsersReplyValidationError is the validation error returned by
// BatchDeleteUsersReply.Validate if the designated constraints aren't met.
type BatchDeleteUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteUsersReplyValidationError) ErrorName() string {
	return "BatchDeleteUsersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteUsersReplyValidationError{}

// Validate checks the field values on ChangeUserStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeUserStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeUserStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeUserStatusRequestMultiError, or nil if none found.
func (m *ChangeUserStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeUserStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ChangeUserStatusRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ChangeUserStatusRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := ChangeUserStatusRequestValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeUserStatusRequestMultiError(errors)
	}

	return nil
}

// ChangeUserStatusRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeUserStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeUserStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeUserStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeUserStatusRequestMultiError) AllErrors() []error { return m }

// ChangeUserStatusRequestValidationError is the validation error returned by
// ChangeUserStatusRequest.Validate if the designated constraints aren't met.
type ChangeUserStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeUserStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeUserStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeUserStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeUserStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeUserStatusRequestValidationError) ErrorName() string {
	return "ChangeUserStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeUserStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeUserStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeUserStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeUserStatusRequestValidationError{}

var _ChangeUserStatusRequest_Status_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on ChangeUserStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeUserStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeUserStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeUserStatusReplyMultiError, or nil if none found.
func (m *ChangeUserStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeUserStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ChangeUserStatusReplyMultiError(errors)
	}

	return nil
}

// ChangeUserStatusReplyMultiError is an error wrapping multiple validation
// errors returned by ChangeUserStatusReply.ValidateAll() if the designated
// constraints aren't met.
type ChangeUserStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeUserStatusReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeUserStatusReplyMultiError) AllErrors() []error { return m }

// ChangeUserStatusReplyValidationError is the validation error returned by
// ChangeUserStatusReply.Validate if the designated constraints aren't met.
type ChangeUserStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeUserStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeUserStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeUserStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeUserStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeUserStatusReplyValidationError) ErrorName() string {
	return "ChangeUserStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeUserStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeUserStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeUserStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeUserStatusReplyValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ResetPasswordRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 6 || l > 128 {
		err := ResetPasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 6 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on ResetPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordReplyMultiError, or nil if none found.
func (m *ResetPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ResetPasswordReplyMultiError(errors)
	}

	return nil
}

// ResetPasswordReplyMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordReply.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordReplyMultiError) AllErrors() []error { return m }

// ResetPasswordReplyValidationError is the validation error returned by
// ResetPasswordReply.Validate if the designated constraints aren't met.
type ResetPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordReplyValidationError) ErrorName() string {
	return "ResetPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordReplyValidationError{}

// Validate checks the field values on CheckAccountExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAccountExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAccountExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAccountExistsRequestMultiError, or nil if none found.
func (m *CheckAccountExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAccountExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 50 {
		err := CheckAccountExistsRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CheckAccountExistsRequest_Account_Pattern.MatchString(m.GetAccount()) {
		err := CheckAccountExistsRequestValidationError{
			field:  "Account",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckAccountExistsRequestMultiError(errors)
	}

	return nil
}

// CheckAccountExistsRequestMultiError is an error wrapping multiple validation
// errors returned by CheckAccountExistsRequest.ValidateAll() if the
// designated constraints aren't met.
type CheckAccountExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAccountExistsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAccountExistsRequestMultiError) AllErrors() []error { return m }

// CheckAccountExistsRequestValidationError is the validation error returned by
// CheckAccountExistsRequest.Validate if the designated constraints aren't met.
type CheckAccountExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAccountExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAccountExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAccountExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAccountExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAccountExistsRequestValidationError) ErrorName() string {
	return "CheckAccountExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAccountExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAccountExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAccountExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAccountExistsRequestValidationError{}

var _CheckAccountExistsRequest_Account_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+$")

// Validate checks the field values on CheckAccountExistsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAccountExistsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAccountExistsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAccountExistsReplyMultiError, or nil if none found.
func (m *CheckAccountExistsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAccountExistsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckAccountExistsReplyMultiError(errors)
	}

	return nil
}

// CheckAccountExistsReplyMultiError is an error wrapping multiple validation
// errors returned by CheckAccountExistsReply.ValidateAll() if the designated
// constraints aren't met.
type CheckAccountExistsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAccountExistsReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAccountExistsReplyMultiError) AllErrors() []error { return m }

// CheckAccountExistsReplyValidationError is the validation error returned by
// CheckAccountExistsReply.Validate if the designated constraints aren't met.
type CheckAccountExistsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAccountExistsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAccountExistsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAccountExistsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAccountExistsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAccountExistsReplyValidationError) ErrorName() string {
	return "CheckAccountExistsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAccountExistsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAccountExistsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAccountExistsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAccountExistsReplyValidationError{}

// Validate checks the field values on GetUserStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserStatsRequestMultiError, or nil if none found.
func (m *GetUserStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.TenantId != nil {
		// no validation rules for TenantId
	}

	if len(errors) > 0 {
		return GetUserStatsRequestMultiError(errors)
	}

	return nil
}

// GetUserStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserStatsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserStatsRequestMultiError) AllErrors() []error { return m }

// GetUserStatsRequestValidationError is the validation error returned by
// GetUserStatsRequest.Validate if the designated constraints aren't met.
type GetUserStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserStatsRequestValidationError) ErrorName() string {
	return "GetUserStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserStatsRequestValidationError{}

// Validate checks the field values on UserStats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserStatsMultiError, or nil
// if none found.
func (m *UserStats) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalUsers

	// no validation rules for ActiveUsers

	// no validation rules for InactiveUsers

	// no validation rules for TodayRegistered

	// no validation rules for ThisWeekRegistered

	// no validation rules for ThisMonthRegistered

	if len(errors) > 0 {
		return UserStatsMultiError(errors)
	}

	return nil
}

// UserStatsMultiError is an error wrapping multiple validation errors returned
// by UserStats.ValidateAll() if the designated constraints aren't met.
type UserStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStatsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStatsMultiError) AllErrors() []error { return m }

// UserStatsValidationError is the validation error returned by
// UserStats.Validate if the designated constraints aren't met.
type UserStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStatsValidationError) ErrorName() string { return "UserStatsValidationError" }

// Error satisfies the builtin error interface
func (e UserStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStatsValidationError{}

// Validate checks the field values on GetUserStatsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserStatsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserStatsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserStatsReplyMultiError, or nil if none found.
func (m *GetUserStatsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserStatsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserStatsReplyValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserStatsReplyValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserStatsReplyValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserStatsReplyMultiError(errors)
	}

	return nil
}

// GetUserStatsReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserStatsReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserStatsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserStatsReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserStatsReplyMultiError) AllErrors() []error { return m }

// GetUserStatsReplyValidationError is the validation error returned by
// GetUserStatsReply.Validate if the designated constraints aren't met.
type GetUserStatsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserStatsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserStatsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserStatsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserStatsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserStatsReplyValidationError) ErrorName() string {
	return "GetUserStatsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserStatsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserStatsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserStatsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserStatsReplyValidationError{}
