syntax = "proto3";

package middleware.ratelimit.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option cc_enable_arenas = true;
option go_package = "github.com/origadmin/runtime/gen/go/middleware/ratelimit/v1;ratelimitv1";
option java_multiple_files = true;
option java_outer_classname = "RateLimitProto";
option java_package = "com.github.origadmin.runtime.middleware.ratelimit.v1";
option objc_class_prefix = "OMM";
option php_namespace = "OrigAdmin\\Runtime\\Middleware\\RateLimit\\V1";

// Rate limiter
message RateLimiter {
  message Redis {
    string addr = 1 [json_name = "addr"];
    string username = 2 [json_name = "username"];
    string password = 3 [json_name = "password"];
    int32 db = 4 [json_name = "db"];
  }
  message Memory {
    int64 expiration = 1 [json_name = "expiration"];
    int64 cleanup_interval = 2 [json_name = "cleanup_interval"];
  }
  bool enabled = 1 [json_name = "enabled"];
  // rate limiter name, supported: bbr, memory, redis.
  string name = 2 [
    json_name = "name",
    (validate.rules).string = {
      in: [
        "bbr",
        "memory",
        "redis"
      ]
    }
  ];
  // The number of seconds in a rate limit window
  int32 period = 3 [json_name = "period"];

  // The number of requests allowed in a window of time
  int32 x_ratelimit_limit = 5 [json_name = "x_ratelimit_limit"];
  // The number of requests that can still be made in the current window of time
  int32 x_ratelimit_remaining = 6 [json_name = "x_ratelimit_remaining"];
  // The number of seconds until the current rate limit window completely resets
  int32 x_ratelimit_reset = 7 [json_name = "x_ratelimit_reset"];
  // When rate limited, the number of seconds to wait before another request will be accepted
  int32 retry_after = 8 [json_name = "retry_after"];

  Memory memory = 101 [json_name = "memory"];
  Redis redis = 102 [json_name = "redis"];
}
