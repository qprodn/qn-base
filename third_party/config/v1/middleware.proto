syntax = "proto3";

package config.v1;

import "buf/validate/validate.proto";
import "google/protobuf/duration.proto";

option cc_enable_arenas = true;
option go_package = "github.com/origadmin/runtime/gen/go/config/v1;configv1";
option java_multiple_files = true;
option java_outer_classname = "CorsProto";
option java_package = "com.github.origadmin.toolkits.runtime.config";
option objc_class_prefix = "Config";

// UserMetric: used to report user-defined metrics
// Example:
//    request_count := UserMetric {
//      timestamp: 1633072800,
//      name: "request_count",
//      value: 12345,
//      labels: {
//        "service": "api_service",
//        "endpoint": "/users"
//      },
//      unit: "requests",
//      type: COUNTER,
//      description: "Number of requests to the API service",
//      context: "Production environment",
//      metadata: {
//        "region": "us-west-1",
//        "instance_id": "i-0123456789abcdef0"
//      }
//    };
//
//    response_time := UserMetric {
//      timestamp: 1633072800,
//      name: "response_time",
//      value: 0.25,
//      labels: {
//        "service": "api_service",
//        "endpoint": "/users"
//      },
//      unit: "seconds",
//      type: GAUGE,
//      description: "Average response time of the API service",
//      context: "Production environment",
//      metadata: {
//        "region": "us-west-1",
//        "instance_id": "i-0123456789abcdef0"
//      }
//    };
message UserMetric {

  // Timestamp: indicates the time of indicator data
  int64 timestamp = 1;
  // Indicator name
  string name = 2;
  // Indicator value
  double value = 3;
  // Indicator label for classification or filtering
  map<string, string> labels = 4;
  // Indicator unit
  string unit = 5;
  // Type of indicator (e.g. counter, timer, histogram, etc.)
  enum MetricType {
    COUNTER = 0;
    GAUGE = 1;
    HISTOGRAM = 2;
    SUMMARY = 3;
  }
  MetricType type = 6;
  // Description of indicators
  string description = 7;
  // Indicator context information
  string context = 8;
  // Additional information for metrics that can be used to store arbitrary metadata
  map<string, string> metadata = 9;
}

// Security middleware config.
message Security {

  // Casbin middleware config
  message Casbin {
    // Policy file
    string policy_file = 3 [json_name = "policy_file"];
    // Model file
    string model_file = 4 [json_name = "model_file"];
  }

  // Authorization middleware config
  message JWT {
    // Signing method
    string signing_method = 3 [json_name = "signing_method"];
    // Signing key
    string signing_key = 4 [json_name = "signing_key"];
    // Old signing key
    string old_signing_key = 5 [json_name = "old_signing_key"];
    // Token expiration time
    google.protobuf.Duration expired_time = 6 [json_name = "expired_time"];
  }

  // Direct release paths
  repeated string direct_release_paths = 2 [json_name = "direct_release_paths"];
  // JWT config for authorization
  JWT jwt = 5 [json_name = "jwt"];
  // Casbin config for authorization
  Casbin casbin = 6 [json_name = "casbin"];
}

// Middleware config is used to configure middleware for entry
message Middleware {

  // Rate limiter
  message RateLimiter {
    message Redis {
      string addr = 1 [json_name = "addr"];
      string username = 2 [json_name = "username"];
      string password = 3 [json_name = "password"];
      int64 db = 4 [json_name = "db"];
    }
    message Memory {
      google.protobuf.Duration expiration = 1 [json_name = "expiration"];
      google.protobuf.Duration cleanup_interval = 2 [json_name = "cleanup_interval"];
    }

    // rate limiter name, supported: bbr, memory, redis.
    string name = 1 [json_name = "name", (buf.validate.field).string = {in: ["bbr", "memory", "redis"]}];
    // The number of seconds in a rate limit window
    int64 period = 2 [json_name = "period"];
    // The number of requests allowed in a window of time
    int64 x_ratelimit_limit = 5 [json_name = "x_ratelimit_limit"];
    // The number of requests that can still be made in the current window of time
    int64 x_ratelimit_remaining = 6 [json_name = "x_ratelimit_remaining"];
    // The number of seconds until the current rate limit window completely resets
    int64 x_ratelimit_reset = 7 [json_name = "x_ratelimit_reset"];
    // When rate limited, the number of seconds to wait before another request will be accepted
    int64 retry_after = 8 [json_name = "retry_after"];

    Memory memory = 101 [json_name = "memory"];
    Redis redis = 102 [json_name = "redis"];
  }

  // Metrics
  message Metrics {
    // System-generated timestamp for the metrics report
    // int64 report_timestamp = 1 [json_name = "report_timestamp"];
    // System-generated unique identifier for the metrics report
    // string report_id = 2 [json_name = "report_id"];
    // System-generated status code indicating the success or failure of the metrics collection
    // int32 status_code = 3 [json_name = "status_code"];
    // System-generated message providing additional context about the metrics collection
    // string status_message = 4 [json_name = "status_message"];

    // Add a list of supported metrics for enabling or disabling specific metrics
    repeated string supported_metrics = 5 [json_name = "supported_metrics"];
    // Repeated field for user-defined metrics
    repeated UserMetric user_metrics = 6 [json_name = "user_metrics"];
  }

  // Metadata
  message Metadata {
    // Metadata prefix
    string prefix = 1 [json_name = "prefix"];
    // Metadata data
    map<string, string> data = 2 [json_name = "data"];
  }

  message Validator {
    int32 version = 1 [json_name = "version", (buf.validate.field).int32 = {gt: 0, lt: 3}];
    bool fail_fast = 2 [json_name = "fail_fast"];
  }

  // Logging switch
  bool enable_logging = 1;
  // Recovery switch
  bool enable_recovery = 2;
  // Metrics switch
  bool enable_tracing = 3;
  // Validation switch
  bool enable_validate = 4;
  // Circuit breaker switch
  bool enable_circuit_breaker = 5;
  // Metadata switch
  bool enable_metadata = 6;

  RateLimiter rate_limiter = 100 [json_name = "rate_limiter"];
  Metadata metadata = 101 [json_name = "metadata"];

  Metrics metrics = 200 [json_name = "metrics"];
  Validator validator = 201 [json_name = "validator"];
}